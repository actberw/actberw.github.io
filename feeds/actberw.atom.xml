<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>记录一些工作中的笔记</title><link href="http://actberw.github.io/" rel="alternate"></link><link href="http://actberw.github.io/feeds/actberw.atom.xml" rel="self"></link><id>http://actberw.github.io/</id><updated>2014-11-10T16:12:52+08:00</updated><entry><title>合并查找算法(union-find)</title><link href="http://actberw.github.io/posts/algorithm/union-find.html" rel="alternate"></link><updated>2014-11-10T16:12:52+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-11-10:posts/algorithm/union-find.html</id><summary type="html">&lt;h3&gt;连通性问题&lt;/h3&gt;
&lt;p&gt;http://www.geeksforgeeks.org/union-find/
http://www.geeksforgeeks.org/union-find-algorithm-set-2-union-by-rank/&lt;/p&gt;</summary></entry><entry><title>二分查找</title><link href="http://actberw.github.io/posts/algorithm/binary-search.html" rel="alternate"></link><updated>2014-11-10T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-11-10:posts/algorithm/binary-search.html</id><summary type="html">&lt;p&gt;http://hedengcheng.com/?p=595
http://blog.csdn.net/cklsoft/article/details/40841637
http://blog.csdn.net/daniel_ustc/article/details/17307937
http://blog.csdn.net/xjm199/article/details/17841281
http://www.cnblogs.com/gaochundong/p/binary_search.html&lt;/p&gt;</summary><category term="algorithm"></category><category term="binary search"></category></entry><entry><title>基本排序算法</title><link href="http://actberw.github.io/posts/algorithm/sort.html" rel="alternate"></link><updated>2014-11-09T15:07:59+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-11-09:posts/algorithm/sort.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;分类&lt;ul&gt;
&lt;li&gt;插入排序: 直接插入排序，Shell排序&lt;/li&gt;
&lt;li&gt;选择排序: 直接选择排序，堆排序&lt;/li&gt;
&lt;li&gt;冒泡排序: 冒泡排序，快速排序&lt;/li&gt;
&lt;li&gt;归并排序，基数排序，桶排序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A sorting algorithm is said to be stable if two objects with equal keys appear in the same order in sorted output as they appear in the input unsorted array. Some sorting algorithms are stable by nature like Insertion sort, Merge Sort, Bubble Sort, etc. And some sorting algorithms are not, like Heap Sort, Quick Sort, etc.&lt;/p&gt;
&lt;p -="-" 0="0" 1_="1]" _="=" _i="(i" _j="(j" a_i_="a[i];
" a_j="a[j" a_j_="a[j];
" for="for" i="i" i_="i++)
" int="int" j="j" j--_="j--)
" j_="j;
" n_="n;" temp="temp" temp_="temp;
"&gt;计数排序
插入排序
void Insertsort(int a[], int n)&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;p&gt;http://www.cnblogs.com/kkun/archive/2011/11/23/2260299.html&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.acmerblog.com/article-sort-3969.html"&gt;http://www.acmerblog.com/article-sort-3969.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.acmerblog.com/sort-algorithm1-3374.html"&gt;http://www.acmerblog.com/sort-algorithm1-3374.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.acmerblog.com/quick-sort-5789.html"&gt;http://www.acmerblog.com/quick-sort-5789.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="sort"></category></entry><entry><title>八皇后问题</title><link href="http://actberw.github.io/posts/algorithm/eight-queens.html" rel="alternate"></link><updated>2014-11-09T14:57:05+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-11-09:posts/algorithm/eight-queens.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;八皇后问题是一个古老而著名的问题，是回溯算法的典型例题。该问题是十九世纪著名的数学家高斯1850年提出：在8X8格的国际象棋上摆放八个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;代码(递归)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define N 8&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//n: row number&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="err"&gt;¦&lt;/span&gt;   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//n: row number&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;¦&lt;/span&gt;   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="err"&gt;¦&lt;/span&gt;   &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;solution num: %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;代码(迭代)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define N 8&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//n: row number&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;queens&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//n: row num&lt;/span&gt;
    &lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
               &lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;queen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;queens&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;solution num: %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slyar.com/blog/eight-queen-c-program.html"&gt;http://www.slyar.com/blog/eight-queen-c-program.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="c/c++"></category></entry><entry><title>字符串反转</title><link href="http://actberw.github.io/posts/str/revert.html" rel="alternate"></link><updated>2014-11-08T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-11-08:posts/str/revert.html</id><summary type="html">&lt;h3&gt;反转字符串&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;revert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;反转句子中单词的顺序&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。句子中单词以空格符隔开。为简单起见，标点符号和普通字母一样处理。&lt;/p&gt;
&lt;p&gt;例如输入“I am a student.”，则输出“student. a am I”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于本题需要翻转句子，我们先颠倒句子中的所有字符。这时，不但翻转了句子中单词的顺序，而且单词内字符也被翻转了。我们再颠倒每个单词内的字符。由于单词内的字符被翻转两次，因此顺序仍然和输入时的顺序保持一致。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;revert_world&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;revert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// revert string&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;revert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;数组循环移位&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;设计一个算法把含有N个元素的数组循环右移K位, 要求时间复杂度为O(N), 且只允许使用两个附加变量.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以先考虑简单的办法, 可以每次将数组的元素右移一位, 循环K次. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;right_shift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; 
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是算法的复杂度位O(kn), 不符合O(n)要求.&lt;/p&gt;
&lt;p&gt;假设原来的数组为ab1234, 要求转换成的数组序列为1234ab, 即循环右移了4位, 可以看出有两段是不变的: ab, 1234, 可以把这两段看成整体, 右移K位的过程看做是两部分的交换, 即后K位与前面部分的交换.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;right_shift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;revert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;revert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;revert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="algorithm"></category><category term="c"></category><category term="str"></category></entry><entry><title>汉诺塔(Tower of Hanoi)</title><link href="http://actberw.github.io/posts/algorithm/hanoi.html" rel="alternate"></link><updated>2014-11-06T21:07:25+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-11-06:posts/algorithm/hanoi.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;有一个梵塔，塔内有三个座A、B、C，A座上有诺干个盘子，盘子大小不等，大的在下，小的在上（如图）。 把这些个盘子从A座移到C座，中间可以借用B座但每次只能允许移动一个盘子，并且在移动过程中，3个座上的盘子始终保持大盘在下，小盘在上.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A key to solving this puzzle is to recognize that it can be solved by breaking the problem down into a collection of smaller problems and further breaking those problems down into even smaller problems until a solution is reached. For example:&lt;/p&gt;
&lt;p&gt;label the pegs A, B, C — these labels may move at different steps
let n be the total number of discs
number the discs from 1 (smallest, topmost) to n (largest, bottommost)
To move n discs from peg A to peg C:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;move n−1 discs from A to B. This leaves disc n alone on peg A&lt;/li&gt;
&lt;li&gt;move disc n from A to C&lt;/li&gt;
&lt;li&gt;move n−1 discs from B to C so they sit on disc n&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The minimum number of moves required to solve a Tower of Hanoi puzzle is 2n - 1, where n is the number of disks.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;towers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter the number of disks : &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The sequence of moves involved in the Tower of Hanoi are :&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;towers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;towers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;frompeg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;topeg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;auxpeg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt; Move disk 1 from peg %c to peg %c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frompeg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;topeg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;towers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frompeg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auxpeg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;topeg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt; Move disk %d from peg %c to peg %c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frompeg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;topeg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;towers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auxpeg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;topeg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frompeg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Amortized Analysis</title><link href="http://actberw.github.io/posts/complexity/amortized-analysis.html" rel="alternate"></link><updated>2014-11-06T16:07:17+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-11-06:posts/complexity/amortized-analysis.html</id><summary type="html">&lt;p&gt;http://www.geeksforgeeks.org/analysis-algorithm-set-5-amortized-analysis-introduction/&lt;/p&gt;</summary></entry><entry><title>Tsl</title><link href="http://actberw.github.io/posts/misc/tsl.html" rel="alternate"></link><updated>2014-11-05T13:05:09+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-11-05:posts/misc/tsl.html</id><summary type="html">&lt;p&gt;http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html
http://www.cnblogs.com/P_Chou/archive/2010/12/27/https-ssl-certification.html
http://www.zhihu.com/question/20744215/answer/16056710
http://openwares.net/misc/cert_conceptions.html
http://www.co.ccpit.org/ca/Htm/menu-item-frame2-content10.htm
http://blog.chinaunix.net/uid-192074-id-3135733.html
http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_verify_client&lt;/p&gt;</summary></entry><entry><title>linux shell</title><link href="http://actberw.github.io/posts/misc/shell.html" rel="alternate"></link><updated>2014-11-05T13:04:03+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-11-05:posts/misc/shell.html</id><summary type="html">&lt;p&gt;http://www.dewen.io/q/15349/Linux%EF%BC%9A%28%29%E5%92%8C%7B%7D%E6%89%A7%E8%A1%8C%E6%8C%87%E4%BB%A4%E7%9A%84%E6%97%B6%E5%80%99%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%E5%91%A2%EF%BC%9F&lt;/p&gt;
&lt;p&gt;http://blog.csdn.net/honghuzhilangzixin/article/details/7073312
http://codingstandards.iteye.com/blog/1160298&lt;/p&gt;
&lt;p&gt;http://www.netingcn.com/tag/shell%E4%B8%AD%E5%86%92%E5%8F%B7%E7%AD%89%E4%BA%8E%E7%94%A8%E9%80%94&lt;/p&gt;</summary></entry><entry><title>Shellshock漏洞</title><link href="http://actberw.github.io/posts/security/shellshock.html" rel="alternate"></link><updated>2014-11-05T13:04:02+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-11-05:posts/security/shellshock.html</id><summary type="html">&lt;p&gt;http://www.infoq.com/cn/news/2014/10/shellshock?utm_campaign=infoq_content&amp;amp;utm_source=infoq&amp;amp;utm_medium=feed&amp;amp;utm_term=global
http://www.oschina.net/translate/protect-yourself-from-non-obvious-dangers-curl-url-pipe-sh&lt;/p&gt;
&lt;p&gt;https://www.trustedsec.com/september-2014/shellshock-dhcp-rce-proof-concept/
http://blog.erratasec.com/2014/09/bash-shellshock-scan-of-internet.html#.VFTZ6PSUeXz&lt;/p&gt;
&lt;p&gt;http://it.deepinmind.com/%E5%85%B6%E5%AE%83/2014/09/26/everything-you-need-to-know-about-shellshock.html
http://www.wired.com/2014/09/hackers-already-using-shellshock-bug-create-botnets-ddos-attacks/
http://www.freebuf.com/articles/others-articles/44863.html
http://drops.wooyun.org/papers/3064&lt;/p&gt;</summary></entry><entry><title>闭包(closure)</title><link href="http://actberw.github.io/posts/misc/closure.html" rel="alternate"></link><updated>2014-11-04T13:24:36+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-11-04:posts/misc/closure.html</id><summary type="html"></summary></entry><entry><title>特殊方法的查找</title><link href="http://actberw.github.io/posts/python/special-method-lookup.html" rel="alternate"></link><updated>2014-11-03T21:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-11-03:posts/python/special-method-lookup.html</id><summary type="html">&lt;p&gt;For old-style classes, special methods are always looked up in exactly the same way as any other method or attribute. This is the case regardless of whether the method is being looked up explicitly as in &lt;code&gt;x.__getitem__(i)&lt;/code&gt; or implicitly as in &lt;code&gt;x[i]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For new-style classes, implicit invocations of special methods are only guaranteed to work correctly if defined on an object’s &lt;em&gt;type&lt;/em&gt;, not in the object’s instance dictionary.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于上面定义的类A, &lt;code&gt;A.n&lt;/code&gt; 实际上调用的是&lt;code&gt;type.__getattribute__&lt;/code&gt;, &lt;code&gt;A().n&lt;/code&gt;实际调用的是&lt;code&gt;object.__getattribute__&lt;/code&gt;(参见&lt;a href="/posts/python/magic-object.html"&gt;特性的搜索顺序&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Implicit special method lookup generally also bypasses the _&lt;em&gt;getattribute_&lt;/em&gt;() method even of the object’s metaclass.Bypassing the _&lt;em&gt;getattribute_&lt;/em&gt;() machinery in this fashion provides significant scope for speed optimisations within the interpreter, at the cost of some flexibility in the handling of special methods&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="https://docs.python.org/2/reference/datamodel.html#special-method-lookup-for-new-style-classes"&gt;https://docs.python.org/2/reference/datamodel.html#special-method-lookup-for-new-style-classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[1]&lt;a href="http://stackoverflow.com/questions/24150894/what-is-the-difference-between-type-getattribute-and-object-getattribute"&gt;http://stackoverflow.com/questions/24150894/what-is-the-difference-between-type-getattribute-and-object-getattribute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="method"></category></entry><entry><title>python 描述符</title><link href="http://actberw.github.io/posts/python/descriptor.html" rel="alternate"></link><updated>2014-11-03T10:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-11-03:posts/python/descriptor.html</id><summary type="html">&lt;p&gt;描述符就是对象的一个绑定了行为的特性(attribute with "binding behavior"), 对特性的操作内部转化为相应方法的调用. 默认的特性访问实际是操作(get, set, delete)的对象的 &lt;a href="/posts/python/magic-object.html"&gt;__dict__&lt;/a&gt; 特性,但特性访问时如果查找出来的对象实现了任意的描述符方法, python就会调用描述符的方法而不是默认的行为.&lt;/p&gt;
&lt;p&gt;描述符是一个强大的通用的协议, 也是属性, 方法, 静态方法, 动态方法, super()背后的实现机制. python2.2中引入的新式类也是通过描述符实现的. 描述符简化了底层c代码, 为python程序提供了灵活的工具组.&lt;/p&gt;
&lt;h3&gt;descriptor protocal&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;descr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="n"&gt;descr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;descr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__delete__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;定义了以上三个任意的方法的对象就是描述符.如果一个对象只定义了 __get__(), 被称为非数据描述符(non-data descriptor)(通常用于方法), 如果同时定义了 __get__ 和 __set__() 被称为是 数据描述符(data descriptor). &lt;/p&gt;
&lt;p&gt;要创建一个只读描述符, 同时定义 __get__ 和 __set__, __set__ 只需要抛出一个AttributeError异常即可.&lt;/p&gt;
&lt;h3&gt;调用描述符&lt;/h3&gt;
&lt;p&gt;描述符的访问可以直接调用它的方法&lt;code&gt;type(object).__dict__['descr'].__get__(obj)&lt;/code&gt;, 但是通常是通过访问特性的方式自动进行调用&lt;code&gt;obj.descr&lt;/code&gt;.  对于obj.descr的访问方式, 遵循&lt;a href="/posts/python/magic-object.html"&gt;特性查找顺序的&lt;/a&gt;, 具体的调用方式取决与obj是实例还是类(新式类). &lt;/p&gt;
&lt;p&gt;obj是实例, 则在 object.__getattribute__() 中把&lt;code&gt;obj.descr&lt;/code&gt; into &lt;code&gt;type(obj).__dict__['descr'].__get__(obj, type(obj))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;obj是类, 则在 type.__getattribute__() 中把&lt;code&gt;obj.descr&lt;/code&gt; into &lt;code&gt;obj.__dict__['destr'].__get__(None, obj)&lt;/code&gt;, 参见&lt;a href="/posts/python/special-method-lookup.html"&gt;特殊方法的查找&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;对于上面的处理方式可以看出: __get__() 的第一个参数要么是owner的实例, 要么是None. 描述符必须定义为class特性, 如果定义为实例特性, python不会自动调用 __get__() 和 __set__() 方法.&lt;/p&gt;
&lt;p&gt;对描述符赋值&lt;code&gt;obj.descr = 100&lt;/code&gt;, 转化为 __set__() 的调用&lt;code&gt;type(obj).__dict__['descr'].__set__(obj, 100)&lt;/code&gt;, 第一个参数是句点前的实例, 第二个参数是要赋值的值.
同样的&lt;code&gt;del obj.descr&lt;/code&gt;则调用 __delete__() 方法.&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://nbviewer.ipython.org/gist/ChrisBeaumont/5758381/descriptor_writeup.ipynb"&gt;http://nbviewer.ipython.org/gist/ChrisBeaumont/5758381/descriptor_writeup.ipynb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[1]&lt;a href="https://docs.python.org/2/howto/descriptor.html"&gt;https://docs.python.org/2/howto/descriptor.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="descriptor"></category></entry><entry><title>python magic object</title><link href="http://actberw.github.io/posts/python/magic-object.html" rel="alternate"></link><updated>2014-11-03T10:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-11-03:posts/python/magic-object.html</id><summary type="html">&lt;h3&gt;__dict__&lt;/h3&gt;
&lt;p&gt;The default behavior for attribute access is to get, set, or delete the attribute from an object’s dictionary. For instance, a.x has a lookup chain starting with &lt;code&gt;a.__dict__['x']&lt;/code&gt;, then &lt;code&gt;type(a).__dict__['x']&lt;/code&gt;, and continuing through the base classes of type(a) excluding metaclasses. &lt;/p&gt;
&lt;h3&gt;Customizing attribute access&lt;/h3&gt;
&lt;p&gt;__getattr__, __setattr__, __delattr__, __getattribute__(new-style class)
A key difference between __getattr__ and __getattribute__ is that __getattr__ is only invoked if the attribute wasn't found the usual ways. It's good for implementing a fallback for missing attributes, and is probably the one of two you want&lt;/p&gt;
&lt;p&gt;When retrieving an attribute from an object (print objectname.attrname) Python follows these steps(参见&lt;a href="/posts/python/mro.html"&gt;mro&lt;/a&gt;和refer[0]):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If attrname is a special (i.e. Python-provided) attribute for objectname, return it.&lt;/li&gt;
&lt;li&gt;Check &lt;code&gt;objectname.__class__.__dict__&lt;/code&gt; for attrname. If it exists and is a data-descriptor, return the descriptor result. Search all bases of &lt;code&gt;objectname.__class__&lt;/code&gt; for the same case.&lt;/li&gt;
&lt;li&gt;Check &lt;code&gt;objectname.__dict__&lt;/code&gt; for attrname, and return if found. If objectname is a class, search its bases too. If it is a class and a descriptor exists in it or its bases, return the descriptor result.&lt;/li&gt;
&lt;li&gt;Check &lt;code&gt;objectname.__class__.__dict__&lt;/code&gt; for attrname. If it exists and is a non-data descriptor, return the descriptor result. If it exists, and is not a descriptor, just return it. If it exists and is a data descriptor, we shouldn't be here because we would have returned at point 2. Search all bases of &lt;code&gt;objectname.__class__&lt;/code&gt; for same case.&lt;/li&gt;
&lt;li&gt;Raise AttributeError&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;type.__getattribute__&lt;/code&gt; 实现了上面的类搜索, &lt;code&gt;object.__getattribute__&lt;/code&gt;实现了实例搜索, 参见&lt;a href="/posts/python/special-method-lookup.html"&gt;特殊方法的查找&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;__slots__&lt;/h3&gt;
&lt;p&gt;By default, instances of both old and new-style classes have a dictionary for attribute storage. This wastes space for objects having very few instance variables. The space consumption can become acute when creating large numbers of instances.&lt;/p&gt;
&lt;p&gt;The default can be overridden by defining __slots__ in a new-style class definition. The __slots__ declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because __dict__ is not created for each instance.&lt;/p&gt;
&lt;h3&gt;Customizing instance and subclass checks&lt;/h3&gt;
&lt;p&gt;The following methods are used to override the default behavior of the isinstance() and issubclass() built-in functions.__instancecheck__ and __subclasscheck__&lt;/p&gt;
&lt;h3&gt;__call__&lt;/h3&gt;
&lt;p&gt;alled when the instance is “called” as a function; if this method is defined, x(arg1, arg2, ...) is a shorthand for x.__call__(arg1, arg2, ...).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;init&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;call&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://www.cafepy.com/article/python_attributes_and_methods/python_attributes_and_methods.html"&gt;http://www.cafepy.com/article/python_attributes_and_methods/python_attributes_and_methods.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="__init__"></category></entry><entry><title>python 元类</title><link href="http://actberw.github.io/posts/python/metaclass.html" rel="alternate"></link><updated>2014-11-02T20:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-11-02:posts/python/metaclass.html</id><summary type="html">&lt;p&gt;元类就是用来创建类的“东西”, 类是其元类的实例(a class is an instance of its metaclass), type就是Python在背后用来创建所有类的元类(参见&lt;a href="/posts/python/type.html"&gt;python type system&lt;/a&gt;), 下面代码展示了type的基本用法.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MetaClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
        &lt;span class="n"&gt;pass&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;echo_bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;FooChild&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;FooChild&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;echo_bar&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo_bar&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;echo_bar&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FooChild&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;echo_bar&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FooChild&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;echo_bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;为什么要使用元类&lt;/h3&gt;
&lt;p&gt;元类的主要目的就是为了当创建类时能够自动地改变类, 一般来说根本就用不上它。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“元类就是深度的魔法，99%的用户应该根本不必为此操心。如果你想搞清楚究竟是否需要用到元类，那么你就不需要它。那些实际用到元类的人都非常清楚地知道他们需要做什么，而且根本不需要解释为什么要用元类。”  —— Python界的领袖 Tim Peters&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;__metaclass__属性&lt;/h3&gt;
&lt;p&gt;当你写如下代码时 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;
       &lt;span class="p"&gt;[...]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python做了如下的操作:
Foo中有__metaclass__这个属性吗？如果是，Python会在内存中通过__metaclass__创建一个名字为Foo的类对象（我说的是类对象，请紧跟我的思路）。如果Python没有找到__metaclass__，它会继续在Bar（父类）中寻找__metaclass__属性，并尝试做和前面同样的操作。如果Python在任何父类中都找不到__metaclass__，它就会在模块层次中去寻找__metaclass__，并尝试做同样的操作。如果还是找不到__metaclass__,Python就会用内置的type来创建这个类对象。&lt;/p&gt;
&lt;p&gt;现在的问题就是，你可以在__metaclass__中放置些什么代码呢？答案就是：可以创建一个类的东西。那么什么可以用来创建一个类呢？type，或者任何使用到type或者子类化type的东东都可以。&lt;/p&gt;
&lt;h3&gt;自定义元类&lt;/h3&gt;
&lt;p&gt;_&lt;em&gt;metaclass_&lt;/em&gt; 可以是任意可以被调用的对象(callable object), 并不一定要是个类. 下面代码创建的元类目的是要把类的属性都改成大写形式.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# 函数表示形式&lt;/span&gt;
&lt;span class="cp"&gt;# 元类会自动将你通常传给‘type’的参数作为自己的参数传入&lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;upper_attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future_class_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future_class_parents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future_class_attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;&amp;#39;&amp;#39;&amp;#39;返回一个类对象，将属性都转为大写形式&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;  &lt;span class="err"&gt;所有不以&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;开头的属性&lt;/span&gt;
    &lt;span class="n"&gt;attrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;future_class_attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;uppercase_attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;通过&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;来做类对象的创建&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future_class_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future_class_parents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uppercase_attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;upper_attr&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt;  &lt;span class="err"&gt;这会作用到这个模块中的所有类&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bip&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;输出&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;BAR&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;输出&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;

&lt;span class="cp"&gt;# 类表示形式&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;UpperAttrMetaClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;__new__&lt;/span&gt; &lt;span class="err"&gt;是在&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="err"&gt;之前被调用的特殊方法&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future_class_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future_class_parents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future_class_attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;attrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;future_class_attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;uppercase_attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future_class_parents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uppercase_attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;__metaclass__虽然可以接受任何可调用的对象，但是类相对于函数有以下好处:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;意图会更加清晰。当你读到UpperAttrMetaclass(type)时(&lt;em&gt;从type继承&lt;/em&gt;)，你知道接下来要发生什么。&lt;/li&gt;
&lt;li&gt;你可以使用OOP编程。元类可以从元类中继承而来，改写父类的方法。元类甚至还可以使用元类。&lt;/li&gt;
&lt;li&gt;你可以把代码组织的更好。当你使用元类的时候肯定不会是像我上面举的这种简单场景，通常都是针对比较复杂的问题。将多个方法归总到一个类中会很有帮助，也会使得代码更容易阅读。&lt;/li&gt;
&lt;li&gt;你可以使用__new__, __init__以及__call__这样的特殊方法。它们能帮你处理不同的任务。就算通常你可以把所有的东西都在__new__里处理掉，有些人还是觉得用__init__更舒服些。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python中的一切都是对象，它们要么是类的实例，要么是元类的实例，除了type。type实际上是它自己的元类，在纯Python环境中这可不是你能够做到的，这是通过在实现层面耍一些小手段做到的。其次，元类是很复杂的。对于非常简单的类，你可能不希望通过使用元类来对类做修改。你可以通过其他两种技术来修改类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monkey patching&lt;/li&gt;
&lt;li&gt;class decorators&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当你需要动态修改类时，99%的时间里你最好使用上面这两种技术.&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://blog.jobbole.com/21351/"&gt;http://blog.jobbole.com/21351/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[1]&lt;a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python"&gt;http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="metaclass"></category></entry><entry><title>python type system</title><link href="http://actberw.github.io/posts/python/type.html" rel="alternate"></link><updated>2014-11-02T14:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-11-02:posts/python/type.html</id><summary type="html">&lt;p&gt;Up to Python 2.1 the concept of class was unrelated to the concept of type, and old-style classes were the only flavor available. For an old-style class, the statement x.&lt;strong&gt;class&lt;/strong&gt; provides the class of x, but type(x) is always &amp;lt;type 'instance'&gt;. This reflects the fact that all old-style instances, independent of their class, are implemented with a single built-in type, called instance. New-style classes were introduced in Python 2.2 to unify the concepts of class and type. The term type is equivalent to the term class, a new-style class is simply a user-defined type. If x is an instance of a new-style class, then type(x) is typically the same as x.&lt;strong&gt;class&lt;/strong&gt; . this post is about new-style class or type.&lt;/p&gt;
&lt;h3&gt;object defination&lt;/h3&gt;
&lt;p&gt;We define an object by saying it has:
    - Identity
    - A value
    - A type
    - One or more bases&lt;/p&gt;
&lt;p&gt;In python, everything is an object.&lt;/p&gt;
&lt;h3&gt;object and relationship&lt;/h3&gt;
&lt;p&gt;These are the subclass-superclass relationship (a.k.a. specialization or inheritance, "man is an animal", etc.) and the type-instance relationship (a.k.a instantiation, "Joe is a man", etc.). &amp;lt;type 'type'&gt; and &amp;lt;type 'object'&gt; are two primitive objects of the system. If an object is an instance of &amp;lt;type 'type'&gt;, then it is a type, otherwise it is not a type(参见&lt;a href="/posts/python/metaclass.html"&gt;python元类&lt;/a&gt;). &amp;lt;type 'type'&gt; is an instance of itself and a subclass of &amp;lt;type 'object'&gt;. &amp;lt;type 'object'&gt; is an instance of &amp;lt;type 'type'&gt; and a subclass of no object. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Type objects share the following traits:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;They&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;represent&lt;/span&gt; &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;programs&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;They&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;subclassed&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;They&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;instantiated&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;more built-in types&lt;/h3&gt;
&lt;p&gt;&lt;img alt="built-in types" src="/img/builtin_types.png" /&gt;&lt;br /&gt;
solid line means inheritance from, dashed line means an instance of.&lt;br /&gt;
If we created a new object by subclassing &amp;lt;type 'type'&gt; it would be in the leftmost space, and would also be both a subclass and instance of &amp;lt;type 'type'&gt;&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html"&gt;http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="type"></category><category term="object model"></category><category term="class"></category></entry><entry><title>python 多重继承方法解析顺序</title><link href="http://actberw.github.io/posts/python/mro.html" rel="alternate"></link><updated>2014-11-02T13:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-11-02:posts/python/mro.html</id><summary type="html">&lt;p&gt;pyhton 支持多重继承, 方法(or attribute)查找顺序称为mro, 目前有三种mro: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;classic&lt;/li&gt;
&lt;li&gt;python 2.2 new-style&lt;/li&gt;
&lt;li&gt;c3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中只有c3算法是2.3+广泛使用的.&lt;/p&gt;
&lt;h3&gt;classic mro&lt;/h3&gt;
&lt;p&gt;classic mro 采用的是简单的广度有限算法(DFS), 中序遍历. 查找过程中第一个匹配的返回. 这种算法简单情况下没问题，但是diamond 继承时就出现问题了, 例如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于D classic mro查找方法的顺序为: D, B, A, C, A, 调用save方法时A的save方法会被调用, 正确情况应该是C的save方法&lt;/p&gt;
&lt;h3&gt;python 2.2 new-style&lt;/h3&gt;
&lt;p&gt;针对上面的问题2.2中查找算法做了下改进,依然是中序遍历, 不过对于mro中多次出现的类, 只保留最后出现的那个，其他的删除,  上面的用新的mro算法就是: D, B, C, A. 但是这种算法依然有不适用的情况, 参见refer[0].&lt;/p&gt;
&lt;h3&gt;c3&lt;/h3&gt;
&lt;p&gt;在复杂的继承中满足所有情况的mro规则就是monotonic, 简单的标记介绍: &lt;/p&gt;
&lt;p&gt;C1 C2 ... CN
表示类列表(list of classes)[C1, C2, ... , CN], 其中表头是第一个项C1(head=C1), 表尾是除了表头的其他项(tail=C2 ... CN.)&lt;/p&gt;
&lt;p&gt;C + (C1 C2 ... CN) = C C1 C2 ... CN&lt;/p&gt;
&lt;p&gt;表示列表相加 [C] + [C1, C2, ... ,CN].&lt;/p&gt;
&lt;p&gt;如果要计算L[C](the linearization L[C] of the class C). 规则如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the linearization of C is the sum of C plus the merge of the linearizations of the parents and the list of the parents.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;符号表示为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B1&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;BN&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;B1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BN&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;B1&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;BN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;merge的计算遵循下面的规则:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;take the head of the first list; if this head is not in the tail of any of the other lists, then add it to the linearization of C and remove it from the lists in the merge, otherwise look at the head of the next list and take it, if it is a good head. Then repeat the operation until all the class are removed or it is impossible to find good heads. In this case, it is impossible to construct the merge, Python 2.3 will refuse to create the class C and will raise an exception&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;bad mro&lt;/h3&gt;
&lt;p&gt;A MRO is bad when it breaks such fundamental properties as local precedence ordering and monotonicity. &lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://python-history.blogspot.com/2010/06/method-resolution-order.html"&gt;http://python-history.blogspot.com/2010/06/method-resolution-order.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[1]&lt;a href="https://www.python.org/download/releases/2.3/mro/"&gt;https://www.python.org/download/releases/2.3/mro/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="mro"></category><category term="c3"></category></entry><entry><title>linux 信号</title><link href="http://actberw.github.io/posts/misc/signal.html" rel="alternate"></link><updated>2014-11-01T20:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-11-01:posts/misc/signal.html</id><summary type="html">&lt;p&gt;可以 &lt;code&gt;man 7 signal&lt;/code&gt; 查看详细文档.  &lt;/p&gt;
&lt;h3&gt;Signal Mask and Pending Signals&lt;/h3&gt;
&lt;p&gt;A signal may be blocked, which means that it is queued by the kernel and delivered until it is later unblocked.Between the time when it is generated and when it is delivered a signal is said to be pending.&lt;/p&gt;
&lt;p&gt;The SIG_SETMASK tells that the signals in set are to be blocked, and signals that are not present in the set are to be unblocked. &lt;/p&gt;
&lt;h3&gt;Reliable signals and Real-time signals&lt;/h3&gt;
&lt;p&gt;Linux  supports the standard signals(Reliable signals) and so called real-time signals specified by The POSIX specification. &lt;/p&gt;
&lt;p&gt;real-time signals are to be used by the programmer and have no predefined meaning. Two macros are available: SIGRTMIN and SIGRTMAX that tells the range of these signals. You can use one using SIGRTMIN+n where n is some number. Never hard code their numbers, real time signals are used by threading library (both LinuxThreads and NTPL), so they adjust SIGRTMIN at run time.&lt;/p&gt;
&lt;p&gt;Whats the difference between RT signals and standard signals? There are couple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;More than one RT signal can be queued for the process if it has the signal blocked while someone sends it. In standard signals only one of a given type is queued, the rest is ignored.&lt;/li&gt;
&lt;li&gt;Order of delivery of RT signal is guaranteed to be the same as the sending order. PID and UID of sending process is written to si_pid and si_uid fields of siginfo_t.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Signal Dispositions&lt;/h3&gt;
&lt;p&gt;sigaction or signal&lt;/p&gt;
&lt;h3&gt;Synchronously Accepting a Signal&lt;/h3&gt;
&lt;p&gt;sigwaitinfo, sigtimedwait, and sigwait&lt;/p&gt;
&lt;h3&gt;Signal handled in multi-thread&lt;/h3&gt;
&lt;p&gt;UNIX allows individual threads to indicate which signals they are accepting and which they are ignoring. &lt;/p&gt;
&lt;p&gt;However the signal can only be delivered to one thread, which is generally the first thread that is accepting that particular signal. UNIX provides two separate system calls, kill( pid, signal ) and pthread_kill( tid, signal ), for delivering signals to processes or specific threads respectively. &lt;/p&gt;
&lt;p&gt;A process-directed signal may be delivered to any one of the threads that does not currently have the signal blocked. If more than one of the threads has the signal unblocked, then the kernel chooses an arbitrary thread to which to deliver the signal.&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://www.ibm.com/developerworks/cn/linux/l-cn-signalsec/"&gt;http://www.ibm.com/developerworks/cn/linux/l-cn-signalsec/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="linux"></category><category term="signal"></category><category term="c"></category></entry><entry><title>线程(thread)</title><link href="http://actberw.github.io/posts/misc/thread.html" rel="alternate"></link><updated>2014-10-28T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-10-28:posts/misc/thread.html</id><summary type="html">&lt;p&gt;线程是操作系统调度的基本单位(thread is a basic unit of CPU utilization), 它被包含在进程之中, 线程提供了一种并行的方式, 可以利用多核cpu(kernel thread). 一个进程中可以并发多个线程. 同一进程中的多条线程将共享该进程中的资源，如text区, data区, 虚拟地址空间，文件描述符和信号处理, 但线程有自己的调用栈, 寄存器环境(包括pc register), 本地存储, signal mask等. 进程是操作系统分配资源的最小单元, 相对于进程线程有以下优势:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建速度快, 占用资源少&lt;/li&gt;
&lt;li&gt;线程间切换比进程间更快&lt;/li&gt;
&lt;li&gt;线程共享地址空间, 通讯更方便(straightforward)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="muiti thread process" src="/img/thread_processes.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;线程有两种实现: kernel thread 和user thread.&lt;/p&gt;
&lt;h3&gt;kernel thread&lt;/h3&gt;
&lt;p&gt;通常说的内核线程有两种含义:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行在内核态daemon线程&lt;/li&gt;
&lt;li&gt;可以被内核调度的实体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内核线程由内核管理创建, 调度 永远都运行在内核态，抢占式的调度, 内核线程只能之用大于PAGE_OFFSET（即3GB）的地址空间，而普通进程则可以使用整个4GB的地址空间。内核线程只能调用内核函数，而普通进程必须通过系统调用才能使用内核函数.&lt;/p&gt;
&lt;h3&gt;user thread&lt;/h3&gt;
&lt;p&gt;用户级线程由运行时库管理创建, 调度等, 既可以运行在用户态也可以运行在内核态(参见&lt;a href="/posts/misc/systemcall.html"&gt;系统调用&lt;/a&gt;), 对于操作系统是不可见的，因此无法操作系统被调度. &lt;/p&gt;
&lt;p&gt;相对于内核线程切换速度更快在用户态就可以完成，不需要内核参与. user threads differ from fibers in that each user thread has its own thread context instead of sharing the thread context of a single thread. &lt;/p&gt;
&lt;h3&gt;thread model&lt;/h3&gt;
&lt;p&gt;常见有三种线程模型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;M:1: 多个用户线程对应一个内核线程, 来自用户线程的系统调用都由这个内核线程来处理, 这样有个很大的缺点如果有个阻塞的系统调用则所有线程都被阻塞了, 也不能利用多cpu.&lt;/li&gt;
&lt;li&gt;1:1: 每个用户线程对应一个内核线程, 解决了M: 1的问题, linux就是这种实现.&lt;/li&gt;
&lt;li&gt;M:N: M个用户线程对应N内核线程, 参见refer[6]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux 线程实现&lt;/h3&gt;
&lt;p&gt;从Linux内核的角度而言，并不存在线程这个概念。内核对线程并没有设立特别的数据结构，而是与进程一样使用task_struct结构进行描述.&lt;/p&gt;
&lt;p&gt;也就是说线程在内核中也是以一个进程而存在的，都是通过系统调用clone创建, 只不过它和同类的进程共享某些资源，例如进程地址空间，进程的信号，打开的文件等(Calling clone() with CLONE_FS, CLONE_VM, CLONE_SIGHAND, and CLONE_FILES, as all of these data structures will be shared), 我们将这类特殊的进程称之为轻量级进程(Light Weight Process). &lt;/p&gt;
&lt;p&gt;pthread_create 函数在linxu上就是包装的clone. 另外POSIX标准规定在一个多线程的应用程序中，所有线程都必须具有相同的PID。从线程在内核中的实现可得知，每个线程其实都有自己的pid, 为此Linux引入了线程组的概念。在一个多线程的程序中，所有线程形成一个线程组。每一个线程通常是由主线程创建的，主线程即为调用pthread_create()的线程, 对于线程组中的线程来说，其task_struct结构中的tgid字段保存该线程组中主线程的pid，而pid字段则保存每个轻量级进程的本身的pid。对于普通的进程而言，tgid和pid是相同的。事实上，getpid()系统调用中返回的是进程的tgid而不是pid。&lt;/p&gt;
&lt;p&gt;refer:
 - [0]&lt;a href="http://blog.jobbole.com/38696/"&gt;http://blog.jobbole.com/38696/&lt;/a&gt;
 - [1]&lt;a href="http://www.tutorialspoint.com/operating_system/os_multi_threading.htm"&gt;http://www.tutorialspoint.com/operating_system/os_multi_threading.htm&lt;/a&gt;
 - [2]&lt;a href="http://edsionte.com/techblog/archives/tag/pthread"&gt;http://edsionte.com/techblog/archives/tag/pthread&lt;/a&gt;
 - [3]&lt;a href="http://www.evanjones.ca/software/threading.html"&gt;http://www.evanjones.ca/software/threading.html&lt;/a&gt;
 - [4]&lt;a href="http://www.linuxjournal.com/article/1363"&gt;http://www.linuxjournal.com/article/1363&lt;/a&gt;
 - [5]&lt;a href="http://stackoverflow.com/questions/1178785/relationship-between-a-kernel-and-a-user-thread"&gt;http://stackoverflow.com/questions/1178785/relationship-between-a-kernel-and-a-user-thread&lt;/a&gt;
 - [6]&lt;a href="http://courses.cs.vt.edu/cs5204/fall09-kafura/Presentations/Scheduler-Activations.pdf"&gt;http://courses.cs.vt.edu/cs5204/fall09-kafura/Presentations/Scheduler-Activations.pdf&lt;/a&gt;
 - [7]&lt;a href="http://landley.net/kdocs/ols/2002/ols2002-pages-330-337.pdf"&gt;http://landley.net/kdocs/ols/2002/ols2002-pages-330-337.pdf&lt;/a&gt;
 - [8]&lt;a href="http://web.cs.ucdavis.edu/~wu/ecs251/KernelScheduledEntity_FreeBSD_2000.pdf"&gt;http://web.cs.ucdavis.edu/~wu/ecs251/KernelScheduledEntity_FreeBSD_2000.pdf&lt;/a&gt;
 - [9]&lt;a href="https://courses.cs.washington.edu/courses/cse451/11au/section/kim_au_section4.pdf"&gt;https://courses.cs.washington.edu/courses/cse451/11au/section/kim_au_section4.pdf&lt;/a&gt;&lt;/p&gt;</summary><category term="linux"></category><category term="thread"></category><category term="user thread"></category><category term="kernel thread"></category></entry><entry><title>系统调用(system call)</title><link href="http://actberw.github.io/posts/misc/systemcall.html" rel="alternate"></link><updated>2014-10-27T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-10-27:posts/misc/systemcall.html</id><summary type="html">&lt;p&gt;System calls provide userland processes a way to request services from the kernel, services which are managed by operating system like storage, memory, network, process management etc. System calls provide an essential interface between a process and the operating system.Usually, system calls are not invoked directly, instead, most system calls have corresponding C library wrapper functions which perform the steps required (e.g., trapping to kernel mode) in order to invoke the system call. &lt;/p&gt;
&lt;h3&gt;Information and Control Flow Across Priviledge Levels&lt;/h3&gt;
&lt;p&gt;As system call is processed in kernel mode, when a user space process invokes a system call, a transition between user mode and kernel mode is required and executes the appropriate kernel function.&lt;/p&gt;
&lt;p&gt;But no process context switch(mode switch vs context switch see refer[3]) is necessary – although a privilege context switch does occur, it is processed in the context of whichever ever process invoked it. Multiple indirections, switching from user mode to kernel mode and back (much more expensive than a function call)&lt;br /&gt;
&lt;img alt="image" src="/img/syscall.gif" /&gt;&lt;/p&gt;
&lt;h3&gt;Implementation&lt;/h3&gt;
&lt;p&gt;In order to actually do the switch from user mode to kernel mode there are some assembly instructions.For x86 architectures there are two possibilities: software interrupt(int $0x80) or the newer "sysenter". &lt;/p&gt;
&lt;p&gt;Regardless of how the &lt;em&gt;system call handler&lt;/em&gt; is invoked, both possibilities cause:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the CPU to switch to kernel mode,&lt;/li&gt;
&lt;li&gt;the necessary registers to be saved&lt;/li&gt;
&lt;li&gt;some validity checks&lt;/li&gt;
&lt;li&gt;invoke the system call corresponding to the number provided by the user space process.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Simply entering kernel-space alone is not sufficient because there are multiple system calls, all of which enter the kernel in the same manner. Thus, the system call number must be passed into the kernel. On x86, the syscall number is fed to the kernel via the %eax register.  System calls are identified by their numbers. The number of the call foo is __NR_foo. For example, the number of _llseek used above is __NR__llseek, defined as 140 in /usr/include/asm-i386/unistd.h. Different architectures have different numbers.  Often, the kernel routine that handles the call foo is called sys_foo. One finds the association between numbers and names in the sys_call_table, for example in arch/i386/kernel/entry.S.  &lt;/p&gt;
&lt;p&gt;In addition to the system call number, most syscalls require that one or more parameters be passed to them. Somehow, user-space must relay the parameters to the kernel during the trap. The easiest way to do this is via the same means that the syscall number is passed: The parameters are stored in registers. On x86, the registers ebx, ecx, edx, esi, and edi contain, in order, the first five arguments. In the unlikely case of six or more arguments, a single register is used to hold a pointer to user-space where all the parameters are stored.  &lt;/p&gt;
&lt;p&gt;The return value is sent to user-space also via register, it is written into the %eax register on x86.The return value is defined by the system call being invoked, in general, a 0 return value indicates  success, a -1 return value indicates an error, and an error code is stored in errno.&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://en.wikipedia.org/wiki/System_call"&gt;http://en.wikipedia.org/wiki/System_call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[1]&lt;a href="http://articles.manugarg.com/systemcallinlinux2_6.html"&gt;http://articles.manugarg.com/systemcallinlinux2_6.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2]&lt;a href="http://www.enseignement.polytechnique.fr/informatique/INF583/INF583_3.pdf"&gt;http://www.enseignement.polytechnique.fr/informatique/INF583/INF583_3.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3]&lt;a href="http://stackoverflow.com/questions/9238326/system-call-and-context-switch"&gt;http://stackoverflow.com/questions/9238326/system-call-and-context-switch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[4]&lt;a href="http://people.ee.ethz.ch/~arkeller/linux/multi/kernel_user_space_howto-5.html"&gt;http://people.ee.ethz.ch/~arkeller/linux/multi/kernel_user_space_howto-5.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[5]&lt;a href="http://web.cs.ucdavis.edu/~wu/ecs251/KernelScheduledEntity_FreeBSD_2000.pdf"&gt;http://web.cs.ucdavis.edu/~wu/ecs251/KernelScheduledEntity_FreeBSD_2000.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="linux"></category><category term="system call"></category></entry><entry><title>进程用户ID</title><link href="http://actberw.github.io/posts/c/process-uid.html" rel="alternate"></link><updated>2014-10-24T22:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-10-24:posts/c/process-uid.html</id><summary type="html">&lt;p&gt;每个进程有三种用户ID :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实际用户ID(real user id, or ruid)或组&lt;/li&gt;
&lt;li&gt;有效用户ID(effective user id, or euid)或组&lt;/li&gt;
&lt;li&gt;保存用户ID(saved user id, or suid)或组&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;实际用户ID&lt;/h3&gt;
&lt;p&gt;实际用户ID即执行程序得用户ID, 是进程所有者ID. 实际用户ID有两方面的影响:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送信号的权限, 非特权用户进程只有信号发送进程的实际用户ID或有效用户ID等于信号接收进程的实际用户ID或保存的用户ID时才能发送信号.&lt;/li&gt;
&lt;li&gt;access函数做权限检测时会用到&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;有效用户ID&lt;/h3&gt;
&lt;p&gt;通常跟实际用户ID相同, 但当设置了设置用户ID(set-user-ID bit)时(参见&lt;a href="/posts/misc/file-permission.html"&gt;文件权限&lt;/a&gt;)，有效用户ID为文件所有者的ID. 有效用户ID通常用来:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;权限检测&lt;/li&gt;
&lt;li&gt;进程创建的文件的所有者&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;保存用户ID&lt;/h3&gt;
&lt;p&gt;保存用户ID常用来以很高权限(elevated privileges)运行的进程暂时要做一些低权限的操作(unprivileged), 以便进程以后可以再修改回原来的有效用户ID重新获得更高的权限(an unprivileged process can only set its effective user ID to three values: its real user ID, its saved user ID, and its effective user ID—i.e., unchanged). 进程启动时保存用户ID从有效用户ID复制, setuid, seretuid, setresuid会修改保存用户ID.&lt;/p&gt;
&lt;h3&gt;测试代码:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//1. 测试实际用户ID&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;stdio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;unistd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;uid_t&lt;/span&gt; &lt;span class="n"&gt;r_uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e_uid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;r_uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getuid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;e_uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;geteuid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Real User ID:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Effect User ID:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r_uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e_uid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 直接gcc 编译&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;al&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt; &lt;span class="n"&gt;actberw&lt;/span&gt; &lt;span class="n"&gt;actberw&lt;/span&gt; &lt;span class="mh"&gt;7085&lt;/span&gt; &lt;span class="n"&gt;May&lt;/span&gt; &lt;span class="mh"&gt;30&lt;/span&gt; &lt;span class="mh"&gt;22&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;54&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actberw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actberw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actberw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;
&lt;span class="n"&gt;Real&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="nl"&gt;ID:&lt;/span&gt;   &lt;span class="mh"&gt;1000&lt;/span&gt;
&lt;span class="n"&gt;Effect&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="nl"&gt;ID:&lt;/span&gt; &lt;span class="mh"&gt;1000&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;
&lt;span class="n"&gt;Real&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="nl"&gt;ID:&lt;/span&gt;   &lt;span class="mh"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;Effect&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="nl"&gt;ID:&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;


&lt;span class="c1"&gt;// 2. 测试有效用户ID  &lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="err"&gt;设置设置用户&lt;/span&gt;&lt;span class="no"&gt;ID&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;al&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt; 
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rwsr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt; &lt;span class="n"&gt;actberw&lt;/span&gt; &lt;span class="n"&gt;actberw&lt;/span&gt; &lt;span class="mf"&gt;7.0&lt;/span&gt;&lt;span class="no"&gt;K&lt;/span&gt; &lt;span class="n"&gt;May&lt;/span&gt; &lt;span class="mh"&gt;30&lt;/span&gt; &lt;span class="mh"&gt;22&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;54&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;
&lt;span class="n"&gt;Real&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="nl"&gt;ID:&lt;/span&gt;   &lt;span class="mh"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;Effect&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="nl"&gt;ID:&lt;/span&gt; &lt;span class="mh"&gt;1000&lt;/span&gt;


&lt;span class="c1"&gt;// 3. 测试进程创建得文件权限  &lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;stdio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;unistd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="no"&gt;USER_RW&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;S_IRUSR&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="no"&gt;S_IWUSR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;uid_t&lt;/span&gt; &lt;span class="n"&gt;r_uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e_uid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;r_uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getuid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;e_uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;geteuid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Real User ID:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Effect User ID:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r_uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e_uid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./stat.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;O_CREAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;USER_RW&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;actberw&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 直接gcc编译  &lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt; 
&lt;span class="n"&gt;Real&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="nl"&gt;ID:&lt;/span&gt;   &lt;span class="mh"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;Effect&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="nl"&gt;ID:&lt;/span&gt; &lt;span class="mh"&gt;1000&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;al&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-------&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt; &lt;span class="n"&gt;actberw&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt; &lt;span class="n"&gt;May&lt;/span&gt; &lt;span class="mh"&gt;30&lt;/span&gt; &lt;span class="mh"&gt;23&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;20&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;  &lt;span class="p"&gt;#&lt;/span&gt; &lt;span class="err"&gt;所有者是&lt;/span&gt;&lt;span class="n"&gt;effective&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;fork 和 exec&lt;/h3&gt;
&lt;p&gt;fork时子进程会从父进程继承三个用户ID,  当进程执行exec一个文件时如果设置了设置用户ID标志位, 则有效用户ID和保存用户ID都为文件所有者的ID.&lt;/p&gt;
&lt;h3&gt;相关API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;getuid/setuid&lt;/li&gt;
&lt;li&gt;geteuid/seteuid&lt;/li&gt;
&lt;li&gt;getresuid/setresuid&lt;/li&gt;
&lt;li&gt;setreuid&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;api&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;root权限(euid=0)&lt;/th&gt;
&lt;th&gt;非root权限(euid!=0)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;setuid&lt;/td&gt;
&lt;td&gt;修改euid&lt;/td&gt;
&lt;td&gt;id可以是任意值, 而且三个用户ID都等于新的ID&lt;/td&gt;
&lt;td&gt;等于ruid或suid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;seteuid&lt;/td&gt;
&lt;td&gt;只改变进程euid，而不改变ruid和suid&lt;/td&gt;
&lt;td&gt;新euid可以是任意值&lt;/td&gt;
&lt;td&gt;新euid等于ruid或suid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setreuid&lt;/td&gt;
&lt;td&gt;修改ruid和euid, 如果ruid设置了或者euid不等于以前的ruid则suid等于新的euid&lt;/td&gt;
&lt;td&gt;ruid和euid可以是任意值&lt;/td&gt;
&lt;td&gt;euid可以可以设置成三个中的任意一个, ruid可以设置成ruid或者euid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setresuid&lt;/td&gt;
&lt;td&gt;改变ruid, euid和suid&lt;/td&gt;
&lt;td&gt;任意值&lt;/td&gt;
&lt;td&gt;每一个等于原来某个id中的一个&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注: 如果要临时的降特权则用seteuid, 永久的降特权则可用setuid. 由于权限判断依据有效用户ID, 所以在降特权的时候先降组特权，然后再降用户特权, 否则的话进程可能没有权限降组特权. &lt;/p&gt;
&lt;p&gt;refer: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://www.cs.berkeley.edu/~daw/papers/setuid-usenix02.pdf"&gt;http://www.cs.berkeley.edu/~daw/papers/setuid-usenix02.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="linux"></category><category term="setuid"></category><category term="getuid"></category><category term="setresuid"></category></entry><entry><title>Linux上的Shebang符号(#!)</title><link href="http://actberw.github.io/posts/misc/shebang.html" rel="alternate"></link><updated>2014-10-24T21:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-10-24:posts/misc/shebang.html</id><summary type="html">&lt;p&gt;shebang取自#(SHArp)和!(bang), 它是很多脚本文件中第一行的前两个字符, 用来告诉Unix系统要用shebang后面指定的解释器来解释该脚本, 同时把文件名和参数一起作为参数传递给制定的解释器。所以，在很多脚本中，第一行往往都是这么写的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;shebang符号后的解释程序一定要是绝对路径.&lt;/p&gt;</summary><category term="linux"></category><category term="shebang"></category></entry><entry><title>linux 文件权限</title><link href="http://actberw.github.io/posts/misc/file-permission.html" rel="alternate"></link><updated>2014-10-04T19:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-10-04:posts/misc/file-permission.html</id><summary type="html">&lt;p&gt;&lt;code&gt;ls -al /&lt;/code&gt;  显示结果第一栏表示文件的属性共有十个, 第一个代表这个文件类型是, 后面三个一组分别代表: 文件所有者权限(u), 文件所有者组权限(g), 其他用户权限(o).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;drwxrwxrwt&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;  &lt;span class="mi"&gt;4096&lt;/span&gt; &lt;span class="n"&gt;Oct&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;文件类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;d 表示目录  &lt;/li&gt;
&lt;li&gt;- 表示文件  &lt;/li&gt;
&lt;li&gt;l 表示连结档(link file)；   &lt;/li&gt;
&lt;li&gt;b 表示装置文件里面的可供储存的接口设备；   &lt;/li&gt;
&lt;li&gt;c 表示装置文件里面的串行端口设备，例如键盘、鼠标。   &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文件权限&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;权限&lt;/th&gt;
&lt;th&gt;对文件&lt;/th&gt;
&lt;th&gt;对目录&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;r(4)&lt;/td&gt;
&lt;td&gt;read&lt;/td&gt;
&lt;td&gt;可以&lt;code&gt;ll&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;w(2)&lt;/td&gt;
&lt;td&gt;write&lt;/td&gt;
&lt;td&gt;可以在目录下添加或删除文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x(1)&lt;/td&gt;
&lt;td&gt;execute&lt;/td&gt;
&lt;td&gt;可以search或者&lt;code&gt;cd&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X (chmod 修改权限)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+X&lt;/code&gt;则忽略(以前是x则不变, 不是也不增加x权限)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-X&lt;/code&gt;如果有x权限则取消x,没有则忽略. 参见refer[0]&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+X&lt;/code&gt;或&lt;code&gt;-X&lt;/code&gt;效果跟&lt;code&gt;x&lt;/code&gt;一样,&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s(4) 设置用户或者用户组ID位(set user ID bit)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;t(1) 粘滞位(Sticky bit or restricted deletion flag)&lt;/td&gt;
&lt;td&gt;linux中该选项对文件无效&lt;/td&gt;
&lt;td&gt;对目录其下的文件只能被所有者或者root做unlink, rename或rm例如/tmp, 参见refer[1][2].&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S或T&lt;/td&gt;
&lt;td&gt;同s或t, 如果有x权限则表示为小写(s, t), 否则用大写表示(S, T)&lt;/td&gt;
&lt;td&gt;同文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;也可以用1～4个八进制数字表示权限, 其中第一个数字表示设置用户ID(4), 设置用户组ID(2)和粘滞位(1), 后三个数字分别表示:文件所有者, 文件所有者组和其他用户权限, 参见refer[2].&lt;/p&gt;
&lt;h3&gt;设置用户ID或组ID位&lt;/h3&gt;
&lt;p&gt;设置用户ID和组ID位是linux 访问控制标志, 通常用来暂时允许用户以更高的权限执行一些操作, 例如passwd. 设置了设置用户ID位的可执行文件, 由具有可执行权限的普通用户运行时产生的进程会会获得可执行文件所有者的权限(即进程的有效用户ID为可执行文件的所有者), linux下设置用户ID对目录无效. &lt;/p&gt;
&lt;p&gt;目录设置了设置用户组ID位时("chmod g+s"), 该目录下新生成的文件和目录将会继承其用户组ID而不是创建者的用户组ID(the owner ID is never affected, only the group ID), 而且新生成的子目录会继承设置用户组ID位.&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://www.g-loaded.eu/2005/11/08/the-use-of-the-uppercase-x-in-chmod/"&gt;http://www.g-loaded.eu/2005/11/08/the-use-of-the-uppercase-x-in-chmod/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[1]&lt;a href="http://en.wikipedia.org/wiki/Sticky_bit#cite_note-4"&gt;http://en.wikipedia.org/wiki/Sticky_bit#cite_note-4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2]&lt;a href="http://www.linuxmanpages.com/man1/chmod.1.php"&gt;http://www.linuxmanpages.com/man1/chmod.1.php&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="linux"></category><category term="chmod"></category><category term="ls"></category><category term="setuid"></category><category term="chmod"></category><category term="sticky"></category></entry><entry><title>env, set和export</title><link href="http://actberw.github.io/posts/misc/env.html" rel="alternate"></link><updated>2014-09-30T22:27:04+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-30:posts/misc/env.html</id><summary type="html">&lt;p&gt;http://www.thegeekstuff.com/2010/05/bash-variables/
http://www.computerhope.com/unix/uset.htm
http://askubuntu.com/questions/205688/whats-the-difference-between-set-export-and-env-and-when-should-i-use-each
http://www.360doc.com/content/11/0920/16/3200886_149794240.shtml&lt;/p&gt;</summary></entry><entry><title>扫描器masscan</title><link href="http://actberw.github.io/posts/security/masscan.html" rel="alternate"></link><updated>2014-09-27T18:54:10+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-27:posts/security/masscan.html</id><summary type="html">&lt;p&gt;http://reverland.org/network/2014/04/18/&lt;/p&gt;</summary><category term="masscan"></category><category term="zmap"></category><category term="nmap"></category></entry><entry><title>函数调用过程分析</title><link href="http://actberw.github.io/posts/c/function-call.html" rel="alternate"></link><updated>2014-09-24T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-24:posts/c/function-call.html</id><summary type="html">&lt;p&gt;参数传递
X86时代，参数传递是通过入栈实现的，相对CPU来说，存储器访问太慢；这样函数调用的效率就不高，在x86-64时代，寄存器数量多了，GCC就可以利用多达6个寄存器来存储参数，多于6个的参数，依然还是通过入栈实现。了解这些对我们写代码很有帮助，起码有两点启示&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://www.cnblogs.com/bangerlee/archive/2012/05/22/2508772.html&lt;/li&gt;
&lt;li&gt;http://www.unixwiz.net/techtips/win32-callconv-asm.html&lt;/li&gt;
&lt;li&gt;http://learn.akae.cn/media/ch19s01.html&lt;/li&gt;
&lt;/ul&gt;</summary><category term="callstack"></category><category term="stack frame"></category><category term="function call"></category></entry><entry><title>risc vs cisc</title><link href="http://actberw.github.io/posts/misc/risc-vs-cisc.html" rel="alternate"></link><updated>2014-09-23T16:21:06+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-23:posts/misc/risc-vs-cisc.html</id><summary type="html">&lt;p&gt;http://cs.stanford.edu/people/eroberts/courses/soco/projects/risc/risccisc/
http://www.valleytalk.org/2010/11/27/atom%E7%9A%84%E5%89%8D%E7%94%9F%E4%BB%8A%E4%B8%96/
http://blog.jobbole.com/40844/
http://www.360doc.com/content/12/0329/14/9470897_198942451.shtml&lt;/p&gt;</summary><category term="risc"></category><category term="cisc"></category><category term="arm"></category><category term="x86"></category></entry><entry><title>debian 源</title><link href="http://actberw.github.io/posts/misc/debian-sourcelist.html" rel="alternate"></link><updated>2014-09-23T15:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-23:posts/misc/debian-sourcelist.html</id><summary type="html">&lt;h3&gt;/etc/apt/sources.list 中源格式&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# format  &lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://site.example.com/debian&lt;/span&gt; &lt;span class="kp"&gt;distribution&lt;/span&gt; &lt;span class="kp"&gt;component1&lt;/span&gt;
&lt;span class="c"&gt;# example  &lt;/span&gt;
&lt;span class="k"&gt;deb-src&lt;/span&gt; &lt;span class="s"&gt;http://ftp.us.debian.org/debian/&lt;/span&gt; &lt;span class="kp"&gt;wheezy&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;第一部分(deb or deb-src)表示文档类型, deb表示预编译得二进制包, deb-src表示源码包.  &lt;/li&gt;
&lt;li&gt;第二部分是镜像url.   &lt;/li&gt;
&lt;li&gt;第三部分表示debian发型版本号, 可以是release code名(squeeze, wheezy)或者是release class (oldstable, stable, testing, unstable)    &lt;/li&gt;
&lt;li&gt;第四部分包许可类型:   &lt;ul&gt;
&lt;li&gt;main 本身是自由软件，且所有直接依赖的包也都是自由软件。  &lt;/li&gt;
&lt;li&gt;contrib 本身是自由软件，但直接依赖的包中有某个是非自由软件。  &lt;/li&gt;
&lt;li&gt;non-free 本身并非自由软件  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;国内源&lt;/h3&gt;
&lt;p&gt;主要是163得源参见refer[2]&lt;/p&gt;
&lt;p&gt;注: 修改/etc/apt/sources.list后要执行apt-get update 更新有效软件包列表.&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="https://wiki.debian.org/SourcesList"&gt;https://wiki.debian.org/SourcesList&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[1]&lt;a href="http://forum.ubuntu.org.cn/viewtopic.php?t=366506"&gt;http://forum.ubuntu.org.cn/viewtopic.php?t=366506&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2]&lt;a href="http://mirrors.163.com/.help/debian.html"&gt;http://mirrors.163.com/.help/debian.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="debian"></category><category term="linux"></category><category term="apt"></category><category term="sourcelist"></category></entry><entry><title>链接器(linker)和加载器(loader)</title><link href="http://actberw.github.io/posts/misc/linker-and-loader.html" rel="alternate"></link><updated>2014-09-22T22:57:04+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-22:posts/misc/linker-and-loader.html</id><summary type="html">&lt;h4&gt;refer:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;http://www.linuxjournal.com/article/6463&lt;/li&gt;
&lt;li&gt;http://www.linuxjournaldigital.com/linuxjournal/201109#pg77&lt;/li&gt;
&lt;li&gt;http://en.wikipedia.org/wiki/Relocation_(computing)&lt;/li&gt;
&lt;li&gt;http://read.pudn.com/downloads56/ebook/196880/lnl_7_coly.pdf&lt;/li&gt;
&lt;li&gt;http://www.yeolar.com/note/2012/03/20/linux-linking/&lt;/li&gt;
&lt;li&gt;http://www.cnblogs.com/zhanjl/p/3273014.html&lt;/li&gt;
&lt;li&gt;http://blog.csdn.net/tanliyoung/article/details/1258653&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>线程局部存储(thread local storage)</title><link href="http://actberw.github.io/posts/misc/tls.html" rel="alternate"></link><updated>2014-09-22T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-22:posts/misc/tls.html</id><summary type="html">&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://www.akkadia.org/drepper/tls.pdf&lt;/li&gt;
&lt;li&gt;http://stackoverflow.com/questions/6611346/amd64-fs-gs-registers-in-linux&lt;/li&gt;
&lt;/ul&gt;</summary><category term="tls"></category><category term="thread"></category><category term="linux"></category></entry><entry><title>Linux 段机制的实现</title><link href="http://actberw.github.io/posts/misc/segment-in-linux.html" rel="alternate"></link><updated>2014-09-21T21:48:26+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-21:posts/misc/segment-in-linux.html</id><summary type="html"></summary></entry><entry><title>x86实模式(real mode)和保护模式(protect mode)</title><link href="http://actberw.github.io/posts/misc/real-vs-protect.html" rel="alternate"></link><updated>2014-09-21T21:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-21:posts/misc/real-vs-protect.html</id><summary type="html">&lt;h3&gt;8086&lt;/h3&gt;
&lt;p&gt;1978年intel发布了8086 16-bit cpu, 20位地址总线, 最大可寻址$2^{20}$ = 1M, 同时引入了一个非常重要的概念----段, 以支持20位的地址总线。&lt;/p&gt;
&lt;p&gt;为了支持分段机制，Intel在8086的CPU里新增了4个段寄存器: CS, DS, SS, ES. 寻址方法是：segment:offset, 物理地址 = 段地址 * 0x10 + 偏移地址.  8086的诞生标志着Intel 正式进入了x86时代. 段机制虽然实现了地址空间的提升, 但是也带来的一些问题:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同一个物理地址有多种表示方法, 例如0x01C0:0x0000和0x0000:0x1C00所表示的物理地址都是0x01C00。&lt;/li&gt;
&lt;li&gt;地址空间缺乏保护机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;80286及80386&lt;/h3&gt;
&lt;p&gt;由于8086的上述问题，1982年Intel在80286的CPU里首次引入的保护模式。同时为了保持向后兼容8086, 80286支持实模式, 在实模式下工作方式跟8086相同, 寻址方式依然是: segment:offset. 支持保护模式的x86启动时工作在实模式下, Protected mode may only be entered after the system software sets up several descriptor tables and enables the Protection Enable (PE) bit in the control register 0 (CR0).&lt;/p&gt;
&lt;h3&gt;保护模式下的寻址&lt;/h3&gt;
&lt;p&gt;为了实现保护模式，光是用段寄存器来确定一个基地址是不够的，至少还要有一个地址段的长度，并且还需要一些诸如访问权限之类的其他信息, 这个时候段寄存器远远不能满足要求了. &lt;/p&gt;
&lt;p&gt;原因有二：段寄存器只有16位，保存不了这么多信息；段寄存器个数有限，不能保存内存中所有段的信息。所以引入了段描述符表（descriptor table, GDT and LDT），还有四个寄存器: GDTR、LDTR、IDTR和TR. 段描述符表存放在内存中, 段寄存器也不再存储段首地址了，而是段选择器(segment selector). 下图描述了逻辑地址到线性地址的转换过程
&lt;img alt="translation" src="/img/segment-address-translation.jpg" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;段选择器(segment selector)&lt;/li&gt;
&lt;li&gt;GDTR和LDTR&lt;/li&gt;
&lt;li&gt;GDT和LDT&lt;/li&gt;
&lt;li&gt;段寄存器及缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://blog.sina.com.cn/s/blog_65db99840100lc6g.html"&gt;http://blog.sina.com.cn/s/blog_65db99840100lc6g.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[1]&lt;a href="http://blog.chinaunix.net/uid-23069658-id-3569341.html"&gt;http://blog.chinaunix.net/uid-23069658-id-3569341.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2]&lt;a href="http://duartes.org/gustavo/blog/post/memory-translation-and-segmentation/"&gt;http://duartes.org/gustavo/blog/post/memory-translation-and-segmentation/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="real mode"></category><category term="protect mode"></category><category term="gdt"></category><category term="ldt"></category><category term="cpu ring"></category><category term="ring"></category><category term="x86"></category></entry><entry><title>x86 register</title><link href="http://actberw.github.io/posts/misc/register.html" rel="alternate"></link><updated>2014-09-21T20:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-21:posts/misc/register.html</id><summary type="html">&lt;h3&gt;数据寄存器&lt;/h3&gt;
&lt;p&gt;8086 有8个8位数据寄存器，这些8位寄存器可分别组成16位寄存器:&lt;br /&gt;
AH &amp;amp; AL＝AX(accumulator register):累加寄存器，常用于运算 &lt;br /&gt;
BH &amp;amp; BL＝BX(base register):基址寄存器，常用于地址索引 &lt;br /&gt;
CH &amp;amp; CL＝CX(count register):计数寄存器，常用于计数 &lt;br /&gt;
DH &amp;amp; DL＝DX(data register):数据寄存器，常用于数据传递。  &lt;/p&gt;
&lt;h3&gt;段寄存器&lt;/h3&gt;
&lt;p&gt;8086设定了4个段寄存器，专门用来保存段地址, 386及以后保护模式下用来保存段选择器(segment selector), 但是仍是16位:&lt;br /&gt;
CS(Code Segment):代码段寄存器 &lt;br /&gt;
DS(Data Segment):数据段寄存器 &lt;br /&gt;
SS(Stack Segment):堆栈段寄存器 &lt;br /&gt;
ES(Extra Segment):附加段寄存器。&lt;br /&gt;
386后增加了FS,GS&lt;/p&gt;
&lt;h3&gt;特殊功能的寄存器&lt;/h3&gt;
&lt;p&gt;SP(Stack Pointer):堆栈指针寄存器，可指向目前的堆栈位置。&lt;br /&gt;
BP(Base Pointer):基址指针寄存器, 参见&lt;a href="/posts/c/function-call.html"&gt;callstack&lt;/a&gt;&lt;br /&gt;
SI(Source Index):源变址寄存器可用来存放相对于DS段之源变址指针&lt;br /&gt;
DI(Destination Index):目的变址寄存器，可用来存放相对于 ES 段之目的变址指针。&lt;br /&gt;
IP(Instruction Pointer):指令指针寄存器&lt;br /&gt;
FLAGS: 标识寄存器&lt;/p&gt;
&lt;p&gt;注: BX,BP为基址寄存器;SI,DI为变址寄存器. 32位cpu除了段寄存器外其他的加e前缀，64位cpu加r前缀. 64位cpu其他寄存器参见refer[3].&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://cseweb.ucsd.edu/classes/sp11/cse141/pdf/02/S01_x86_64.key.pdf"&gt;http://cseweb.ucsd.edu/classes/sp11/cse141/pdf/02/S01_x86_64.key.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[1]&lt;a href="http://nannan408.iteye.com/blog/982942"&gt;http://nannan408.iteye.com/blog/982942&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2]&lt;a href="http://blog.csdn.net/hgd_dingjun/article/details/2809958"&gt;http://blog.csdn.net/hgd_dingjun/article/details/2809958&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3]&lt;a href="https://software.intel.com/en-us/articles/introduction-to-x64-assembly"&gt;https://software.intel.com/en-us/articles/introduction-to-x64-assembly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="register"></category><category term="assembly"></category></entry><entry><title>assembly</title><link href="http://actberw.github.io/posts/misc/assembly.html" rel="alternate"></link><updated>2014-09-21T15:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-21:posts/misc/assembly.html</id><summary type="html">&lt;h3&gt;语法格式&lt;/h3&gt;
&lt;p&gt;绝大多数 Linux 程序员以前只接触过DOS/Windows 下的汇编语言，这些汇编代码都是 Intel 风格的。但在 Unix 和 Linux 系统中，更多&amp;gt;采用的还是 AT&amp;amp;T 格式，两者在语法格式上有着很大的不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 AT&amp;amp;T 汇编格式中，寄存器名要加上 '%' 作为前缀；而在 Intel 汇编格式中，寄存器名不需要加前缀&lt;/li&gt;
&lt;li&gt;在 AT&amp;amp;T 汇编格式中，用 '$' 前缀表示一个立即操作数；而在 Intel 汇编格式中，立即数的表示不用带任何前缀&lt;/li&gt;
&lt;li&gt;AT&amp;amp;T 和 Intel 格式中的源操作数和目标操作数的位置正好相反。在 Intel 汇编格式中，目标操作数在源操作数的左边；而在 AT&amp;amp;T 汇&amp;gt;编格式中，目标操作数在源操作数的右边。&lt;/li&gt;
&lt;li&gt;在 AT&amp;amp;T 汇编格式中，操作数的字长由操作符的最后一个字母决定，后缀'b'、'w'、'l'分别表示操作数为字节（byte，8 比特）、字（word，16 比特）和长字（long，32比特）；而在 Intel 汇编格式中，操作数的字长是用 "byte ptr" 和 "word ptr" 等前缀来表示的。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;AT&amp;amp;T 格式&lt;/th&gt;
&lt;th&gt;Intel 格式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;movb val, %al&lt;/td&gt;
&lt;td&gt;mov al, byte ptr val&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;在 AT&amp;amp;T 汇编格式中，绝对转移和调用指令（jump/call）的操作数前要加上'*'作为前缀，而在 Intel 格式中则不需要。&lt;/li&gt;
&lt;li&gt;远程转移指令和远程子调用指令的操作码，在 AT&amp;amp;T 汇编格式中为 "ljump" 和 "lcall"，而在 Intel 汇编格式中则为 "jmp far" 和 "call far"，即：&lt;/li&gt;
&lt;li&gt;在 AT&amp;amp;T 汇编格式中，内存操作数的寻址方式是&lt;code&gt;section:disp(base, index, scale)&lt;/code&gt;, 而在 Intel 汇编格式中，内存操作数的寻址方&amp;gt;式为&lt;code&gt;section:[base + index*scale + disp]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CPU总是周而复始地做同一件事: 从内存取指令，然后解释执行它，然后再取下一条指令，再解释执行。CPU最核心的功能单元包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;寄存器（Register），是CPU内部的高速存储器，像内存一样可以存取数据，但比访问内存快得多。随后的几章我们会详细介绍x86的寄存器eax、esp、eip等等，有些寄存器只能用于某种特定的用途，比如eip用作程序计数器，这称为特殊寄存器（Special-purpose Register），而另外一些寄存器可以用在各种运算和读写内存的指令中，比如eax寄存器，这称为通用寄存器（General-purpose Register）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序计数器（PC，Program Counter），是一种特殊寄存器，保存着CPU取下一条指令的地址，CPU按程序计数器保存的地址去内存中取指令然后解释执行，这时程序计数器保存的地址会自动加上该指令的长度，指向内存中的下一条指令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指令译码器（Instruction Decoder）。CPU取上来的指令由若干个字节组成，这些字节中有些位表示内存地址，有些位表示寄存器编号，有些位表示这种指令做什么操作，是加减乘除还是读写内存，指令译码器负责解释这条指令的含义，然后调动相应的执行单元去执行它。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算术逻辑单元（ALU，Arithmetic and Logic Unit）。如果译码器将一条指令解释为运算指令，就调动算术逻辑单元去做运算，比如加减乘除、位运算、逻辑运算。指令中会指示运算结果保存到哪里，可能保存到寄存器中，也可能保存到内存中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址和数据总线（Bus）。CPU和内存之间用地址总线、数据总线和控制线连接起来，每条线上有1和0两种状态。如果在执行指令过程中&amp;gt;需要访问内存，比如从内存读一个数到寄存器，执行过程可以想像成这样&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://www.ruanyifeng.com/blog/2013/10/register.html&lt;/li&gt;
&lt;li&gt;http://www.cnblogs.com/BoyXiao/archive/2010/11/20/1882716.html&lt;/li&gt;
&lt;li&gt;http://www.searchtb.com/2013/03/x86-64_register_and_function_frame.html&lt;/li&gt;
&lt;li&gt;http://blog.jobbole.com/40844/&lt;/li&gt;
&lt;li&gt;http://cseweb.ucsd.edu/classes/sp11/cse141/pdf/02/S01_x86_64.key.pdf&lt;/li&gt;
&lt;li&gt;https://github.com/actberw/learn-plan/blob/master/c-note/assemble.md&lt;/li&gt;
&lt;li&gt;http://www.mouseos.com/arch/segment_registers.html&lt;/li&gt;
&lt;li&gt;http://blog.csdn.net/hgd_dingjun/article/details/2809958&lt;/li&gt;
&lt;li&gt;http://en.wikipedia.org/wiki/X86&lt;/li&gt;
&lt;li&gt;http://oss.org.cn/kernel-book/ch02/2.6.1.htm&lt;/li&gt;
&lt;li&gt;http://www.ibm.com/developerworks/cn/linux/l-assembly/&lt;/li&gt;
&lt;li&gt;http://learn.akae.cn/media/ch18s01.html&lt;/li&gt;
&lt;li&gt;http://en.wikibooks.org/wiki/X86_Assembly/GAS_Syntax&lt;/li&gt;
&lt;/ul&gt;</summary><category term="assembly"></category><category term="gas"></category></entry><entry><title>a20gate</title><link href="http://actberw.github.io/posts/misc/a20-gate.html" rel="alternate"></link><updated>2014-09-21T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-21:posts/misc/a20-gate.html</id><summary type="html">&lt;h3&gt;real mode 模式寻址&lt;/h3&gt;
&lt;p&gt;8086/8088 的地址线有 20 条: A0 ~ A19, 最大可以访问1M内存. 它的寻址方法是：segment:offset，这是一种被称为 logic address（逻辑地址）表示法. 物理地址 = 段地址 * 0x10 + 偏移地址。F000:FFFF = F0000 + FFFF = FFFFF，这是 8086/8088 所能访问的最高地址。8086/8088 的寻址范围是可以表示为：从 0000:0000 - 0000:FFFF,0000:0000 - 1000:FFFF, ... ,F000:0000 - F000:FFFF 段&lt;/p&gt;
&lt;h3&gt;访问 extended memory&lt;/h3&gt;
&lt;p&gt;80286 intel实现了24 位的Address bus，那么在real mode下80286能够访问到的最高地址: FFFF:FFFF = FFFF0 + FFFF = 10FFEFh(h表示16进制). 这已经是logic address所能表达的极限范围了，100000h 以上的内存被称为extend memory，从100000h ~ 10FFEFh这片内存区域在 DOS 下被称为 High Memory（高端内存）。高端内存是 80286 在 real mode 所能访问到的区域，而 8086/8088 所不能访问到的。&lt;/p&gt;
&lt;h3&gt;wraparound 现象&lt;/h3&gt;
&lt;p&gt;当在 8086/8088 下执行 FFFF:FFFF 这个内存寻址时，会产生什么结果呢? 结果很明显: 由于 8086/8088 只有 20 条 address bus，从A0 ~ A19，地址10FFEF的高4位会被抛弃，实际上送上 address bus 的只有0FFEF, 所以 8086/8088 下访问 FFFF:FFFF 地址结果只能访问到 1M 以内的地址。这就是 wraparound 现象：访问 1M 以上地址都会回绕到 1M 内的模值。&lt;/p&gt;
&lt;p&gt;由于80286具有24条address bus，对于FFFF:FFFF地址的访问，会正确得到访问, 不存在 wraparound 现象。所以访问高端内存时，在real mode下80286 和 8086/8088 的行为不一致！&lt;/p&gt;
&lt;h3&gt;引入 A20 Gate&lt;/h3&gt;
&lt;p&gt;为了使用 80286 和 8086/8088 在 real mode 下的行为一致，即在80286下也产生wraparound现象。IBM 想出了古怪方法：当 80286 运行在 real mode 时，将 A20 地址线（第 21 条 address bus）置为 0，这样使得 80286 在 real mode 下第 21 条 address line 无效，从而人为造成了 wraparound 现象。&lt;/p&gt;
&lt;p&gt;refer: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://www.mouseos.com/arch/a20gate.html"&gt;http://www.mouseos.com/arch/a20gate.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[1]&lt;a href="http://docs.huihoo.com/gnu_linux/own_os/booting-a20_4.htm"&gt;http://docs.huihoo.com/gnu_linux/own_os/booting-a20_4.htm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="a20"></category><category term="real mode"></category></entry><entry><title>EOF是什么</title><link href="http://actberw.github.io/posts/misc/eof.html" rel="alternate"></link><updated>2014-09-20T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-20:posts/misc/eof.html</id><summary type="html">&lt;h3&gt;EOF&lt;/h3&gt;
&lt;p&gt;EOF 是end of file的缩写, 表示"文字流"（stream）的结尾. 这里的"文字流"，可以是文件(file), 也可以是标准输入(stdin). 写从终端读取数据的程序时经常会用EOF判断输入结束, 例如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getc&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="err"&gt;　　&lt;/span&gt;&lt;span class="n"&gt;putchar&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的EOF是一个定义在头文件stdio.h的常量，一般等于-1.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# define EOF (-1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;man getc&lt;/code&gt; 中说 &lt;em&gt;getc() return the character read as an unsigned char cast to an int or  EOF  on  end  of file or error.&lt;/em&gt;  就是说在文件结束, 或者发生错误的时候返回EOF.  所以这里的EOF用来标示(indicate)要么文件结束了, 要么发生了错误, 并不是一个特殊的符号. 同时为了确定是否真的是文件结束了c提供了一个 &lt;code&gt;feof()&lt;/code&gt; 函数了来检测.&lt;/p&gt;
&lt;h3&gt;^D(ctrl + d)&lt;/h3&gt;
&lt;p&gt;运行上面的程序如果想结束输入 Linux 中在新的一行的开头按下 &lt;code&gt;^D&lt;/code&gt; 就代表EOF(如果在一行的中间按下 &lt;code&gt;Ctrl-D&lt;/code&gt;，则表示输出"标准输入"的缓存区，所以这时必须按两次&lt;code&gt;^D&lt;/code&gt;), 这里的 &lt;code&gt;^D&lt;/code&gt; 是特殊控制符, 表示标准输入结束.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;stty&lt;/span&gt; &lt;span class="na"&gt;-a&lt;/span&gt;
&lt;span class="n"&gt;intr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;quit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;erase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;kill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="nx"&gt;U&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;eof&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="nb"&gt;D&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;eol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;eol2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;swtch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;undef&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="nx"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="nb"&gt;S&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;susp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="nb"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;rprnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="nb"&gt;R&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;werase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="nx"&gt;W&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;lnext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;flush&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="nx"&gt;O&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="na"&gt;-parenb&lt;/span&gt; &lt;span class="na"&gt;-parodd&lt;/span&gt; &lt;span class="nx"&gt;cs8&lt;/span&gt; &lt;span class="na"&gt;-hupcl&lt;/span&gt; &lt;span class="na"&gt;-cstopb&lt;/span&gt; &lt;span class="nx"&gt;cread&lt;/span&gt; &lt;span class="na"&gt;-clocal&lt;/span&gt; &lt;span class="na"&gt;-crtscts&lt;/span&gt;
&lt;span class="na"&gt;-ignbrk&lt;/span&gt; &lt;span class="na"&gt;-brkint&lt;/span&gt; &lt;span class="na"&gt;-ignpar&lt;/span&gt; &lt;span class="na"&gt;-parmrk&lt;/span&gt; &lt;span class="na"&gt;-inpck&lt;/span&gt; &lt;span class="na"&gt;-istrip&lt;/span&gt; &lt;span class="na"&gt;-inlcr&lt;/span&gt; &lt;span class="na"&gt;-igncr&lt;/span&gt; &lt;span class="nx"&gt;icrnl&lt;/span&gt; &lt;span class="nx"&gt;ixon&lt;/span&gt; &lt;span class="na"&gt;-ixoff&lt;/span&gt; &lt;span class="na"&gt;-iuclc&lt;/span&gt; &lt;span class="nx"&gt;ixany&lt;/span&gt; &lt;span class="nx"&gt;imaxbel&lt;/span&gt; &lt;span class="na"&gt;-iutf8&lt;/span&gt;
&lt;span class="nx"&gt;opost&lt;/span&gt; &lt;span class="na"&gt;-olcuc&lt;/span&gt; &lt;span class="na"&gt;-ocrnl&lt;/span&gt; &lt;span class="nx"&gt;onlcr&lt;/span&gt; &lt;span class="na"&gt;-onocr&lt;/span&gt; &lt;span class="na"&gt;-onlret&lt;/span&gt; &lt;span class="na"&gt;-ofill&lt;/span&gt; &lt;span class="na"&gt;-ofdel&lt;/span&gt; &lt;span class="nx"&gt;nl0&lt;/span&gt; &lt;span class="nx"&gt;cr0&lt;/span&gt; &lt;span class="nx"&gt;tab0&lt;/span&gt; &lt;span class="nx"&gt;bs0&lt;/span&gt; &lt;span class="nx"&gt;vt0&lt;/span&gt; &lt;span class="nx"&gt;ff0&lt;/span&gt;
&lt;span class="nx"&gt;isig&lt;/span&gt; &lt;span class="nx"&gt;icanon&lt;/span&gt; &lt;span class="nx"&gt;iexten&lt;/span&gt; &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="nx"&gt;echoe&lt;/span&gt; &lt;span class="nx"&gt;echok&lt;/span&gt; &lt;span class="na"&gt;-echonl&lt;/span&gt; &lt;span class="na"&gt;-noflsh&lt;/span&gt; &lt;span class="na"&gt;-xcase&lt;/span&gt; &lt;span class="na"&gt;-tostop&lt;/span&gt; &lt;span class="na"&gt;-echoprt&lt;/span&gt; &lt;span class="nx"&gt;echoctl&lt;/span&gt; &lt;span class="nx"&gt;echoke&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果在终端中真的想输入 &lt;code&gt;^D&lt;/code&gt; 怎么办? 这时必须先按下 &lt;code&gt;Ctrl-V&lt;/code&gt;, 然后就可以输入 &lt;code&gt;Ctrl-D&lt;/code&gt;, 系统就不会认为这是EOF. &lt;code&gt;Ctrl-V&lt;/code&gt; 表示按"字面含义"解读下一个输入, 要是想按"字面含义"输入Ctrl-V, 连续输入两次就行了.&lt;/p&gt;
&lt;p&gt;另外要跟 &lt;code&gt;Ctrl-C&lt;/code&gt; 区分开来, &lt;code&gt;Ctrl-C&lt;/code&gt; 是给进程发送 TERM 信号是要结束进程.&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2011/11/eof.html"&gt;http://www.ruanyifeng.com/blog/2011/11/eof.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://unix.stackexchange.com/questions/110240/why-does-ctrl-d-eof-exit-the-shell"&gt;http://unix.stackexchange.com/questions/110240/why-does-ctrl-d-eof-exit-the-shell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="linux"></category><category term="c"></category><category term="eof"></category><category term="stty"></category></entry><entry><title>IP地址及子网掩码</title><link href="http://actberw.github.io/posts/tcp-ip/ip.html" rel="alternate"></link><updated>2014-09-19T15:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-19:posts/tcp-ip/ip.html</id><summary type="html">&lt;h3&gt;IP地址得表示方法&lt;/h3&gt;
&lt;p&gt;IP地址是一个32位的二进制数，通常被分割为4个“8位二进制数”（也就是4个字节）用“点分十进制”表示成（a.b.c.d）的形式，其中，a,b,c,d都是0~255之间的十进制整数。&lt;/p&gt;
&lt;p&gt;最初设计互联网络时，为了便于寻址以及层次化构造网络，每个IP地址包括两个标识码（ID），即网络ID和主机ID。同一个物理网络上的所有主机都使用同一个网络ID，网络上的一个主机（包括网络上工作站，服务器和路由器等）有一个主机ID与其对应。分类:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A类地址: 网络标识由第一组8位二进制数表示，网络标识的第一位二进制数取值必须为0。A类地址第一个地址为00000001，最后一个地址是01111111，换算成十进制就是127，其中127留作保留地址，A类地址的第一段范围是：1～126，A类地址允许有$2^7$ - 2 = 126个网段（减2是因为0不用，127留作它用），网络中的主机标识占3组8位二进制数，每个网络允许有$2^{24}$ - 2 = 16777216台主机（&lt;em&gt;减2是因为全0地址为网络地址，全1为广播地址，这两个地址一般不分配给主机&lt;/em&gt;）。通常分配给拥有大量主机的网络。 &lt;/li&gt;
&lt;li&gt;B类地址: 网络标识由前两组8位二进制数表示，网络标识的前两位二进制数取值必须为10。 B类地址第一个地址为10000000，最后一个地址是10111111，换算成十进制B类地址第一段范围就是128～191，B类地址允许有$2^{14}$ =16384个网段，网络中的主机标识占2组8位二进制数，每个网络允许有$2^{16}$ - 2 = 65533台主机，适用于结点比较多的网络。 &lt;/li&gt;
&lt;li&gt;C类地址: 网络标识由前3组8位二进制数表示，网络标识的前3位二进制数取值必须为110。C类地址第一个地址为11000000，最后一个地址是11011111，换算成十进制C类地址第一段范围就是192～223，C类地址允许有$2^{21}$ = 2097152个网段，网络中的主机标识占1组8位二进制数，每个网络允许有$2^8$ - 2 = 254台主机，适用于结点比较少的网络。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;几类特殊的ip&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;私有ip&lt;/li&gt;
&lt;li&gt;网络地址&lt;br /&gt;
 TCP/IP规定，主机号全为0的地址叫做网络地址&lt;/li&gt;
&lt;li&gt;广播地址&lt;br /&gt;
 TCP/IP规定，主机号全为1的地址用于广播之用，叫做广播地址。所谓广播，指同时向同一子网所有主机发送报文。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;子网掩码&lt;/h3&gt;
&lt;p&gt;子网掩码是一个32位地址，是与IP地址结合使用的一种技术, 目的是为了将一个IP地址的网络地址部分和主机地址部分分开. 表示方法:&lt;br /&gt;
    - 通过与IP地址格式相同的点分十进制表示&lt;br /&gt;
    如：255.0.0.0 或255.255.255.128
    - 在IP地址后加上"/"符号以及1-32的数字，其中1-32的数字表示子网掩码中网络标识位的长度&lt;br /&gt;
    如：192.168.1.1/24 的子网掩码也可以表示为255.255.255.0&lt;/p&gt;
&lt;h3&gt;子网划分&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;根据子网数划分&lt;/li&gt;
&lt;li&gt;根据主机数划分&lt;/li&gt;
&lt;/ul&gt;</summary><category term="tcp/ip"></category></entry><entry><title>linux文件系统</title><link href="http://actberw.github.io/posts/misc/fs.html" rel="alternate"></link><updated>2014-09-16T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-16:posts/misc/fs.html</id><summary type="html">&lt;p&gt;http://www.cnblogs.com/chinacloud/archive/2011/02/16/1955910.html&lt;/p&gt;</summary><category term="linux"></category><category term="fs"></category><category term="btrfs"></category><category term="ext4"></category></entry><entry><title>linux 僵尸(zombie)进程和孤儿(orphan)进程</title><link href="http://actberw.github.io/posts/misc/orphan-process-and-zombie-process.html" rel="alternate"></link><updated>2014-09-12T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-12:posts/misc/orphan-process-and-zombie-process.html</id><summary type="html">&lt;h3&gt;Zombie Processes&lt;/h3&gt;
&lt;p&gt;In Unix and Linux systems, the zombie (or defunct) process is a process that has completed execution but still has an entry in the process table, it is a process in the &lt;a href="http://en.wikipedia.org/wiki/Process_state"&gt;Terminated state&lt;/a&gt;. A zombie process remains in the operating system and does nothing until the parent process determines that the exit status is no longer needed.&lt;/p&gt;
&lt;p&gt;Normally, when a process finishes execution, it reports the execution status to its parent process. Until the parent process decides that the child processes exit status is not needed anymore, the child process turns into a defunct or zombie process. Once the exit status is read via the &lt;code&gt;wait&lt;/code&gt; system call, the zombie's entry is removed from the process table and it is said to be "reaped". It does not use resources and cannot be scheduled for execution.The &lt;code&gt;kill&lt;/code&gt; command has no effect on a zombie process, Zombies can be identified in the output from the Unix ps command by the presence of a "Z" in the "STAT" column.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;pid_t&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;// child process&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;zombie process: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// wait(&amp;amp;status);&lt;/span&gt;
        &lt;span class="c1"&gt;// printf(&amp;quot;zombie process: %d\n, status: %d\n&amp;quot;, pid, WEXITSTATUS(status));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Orphan Processes&lt;/h3&gt;
&lt;p&gt;An Orphan Process is a process that is still executing but whose parent is dead (terminated), then adopted by the init process.
参见&lt;a href="/posts/c/daemon.html"&gt;daemon进程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://lesca.me/archives/process-relationship.html"&gt;http://lesca.me/archives/process-relationship.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Zombie_process"&gt;http://en.wikipedia.org/wiki/Zombie_process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://linuxg.net/what-are-zombie-and-orphan-processes-and-how-to-kill-them/"&gt;http://linuxg.net/what-are-zombie-and-orphan-processes-and-how-to-kill-them/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="linux"></category><category term="zombie"></category><category term="orphan"></category><category term="process"></category></entry><entry><title>daemon进程c实现</title><link href="http://actberw.github.io/posts/c/daemon.html" rel="alternate"></link><updated>2014-09-11T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-11:posts/c/daemon.html</id><summary type="html">&lt;h3&gt;守护进程(daemon process)特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PPID 为 1&lt;/li&gt;
&lt;li&gt;控制终端(TTY, Teletypes) 为"?"&lt;/li&gt;
&lt;li&gt;守护进程必须与其运行前的环境隔离开来，包括未关闭的文件描述符，控制终端，会话，工作目录，以及umask等。这些都是从父进程继承过来的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;创建守护进程的步骤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fork创建子进程, 父进程退出&lt;/li&gt;
&lt;li&gt;调用setsid() 创建新会话&lt;/li&gt;
&lt;li&gt;再次fork，父进程退出&lt;/li&gt;
&lt;li&gt;将当前工作目录改为根目录&lt;/li&gt;
&lt;li&gt;设定uamsk值为0&lt;/li&gt;
&lt;li&gt;关闭不必要的文件描述符&lt;/li&gt;
&lt;li&gt;打开/dev/null，dup2(0, 1, 2)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;代码示例&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;daemonize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;  &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;:
        &lt;span class="c1"&gt;//log_error(NGX_LOG_EMERG, log, ngx_errno, &amp;quot;fork() failed&amp;quot;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;NGX_ERROR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;:
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;default:&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;ngx_pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ngx_getpid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setsid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ngx_log_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NGX_LOG_EMERG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ngx_errno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;setsid() failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;NGX_ERROR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;umask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/dev/null&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_RDWR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ngx_log_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NGX_LOG_EMERG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ngx_errno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s"&gt;&amp;quot;open(&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;/dev/null&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;) failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;NGX_ERROR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dup2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;STDIN_FILENO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ngx_log_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NGX_LOG_EMERG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ngx_errno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dup2(STDIN) failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;NGX_ERROR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dup2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;STDOUT_FILENO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ngx_log_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NGX_LOG_EMERG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ngx_errno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dup2(STDOUT) failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;NGX_ERROR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="linux"></category><category term="daemon"></category><category term="c"></category></entry><entry><title>最大公约数算法(Greatest Common Divisor)</title><link href="http://actberw.github.io/posts/algorithm/gcd.html" rel="alternate"></link><updated>2014-09-06T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-06:posts/algorithm/gcd.html</id><summary type="html">&lt;p&gt;公元前300年左右, 欧几里得(Euclid)就在他的著作&amp;lt;几何原本&amp;gt;中给出了--辗转相除法. 原理是:假设用f(x, y)表示x, y的最大公约数, 取$k=\frac{x/y}, x =ky + b$, 如果一个数能同时整除x,y, 则必能同时被b, y整除. 而能同时被b, y整除则能同时整除x,y, 即b, y的公约数与x, y的公约数相同, 最大公约数也相同, 则有f(x, y) = f(y, x%y) (x &amp;gt;= y &amp;gt;= 0), 如此便把愿问题转化为求两个更小的数的最大公约数, 直到其中一个为0, 剩下的一个就是两者的最大公约数.&lt;/p&gt;
&lt;h3&gt;解法一&lt;/h3&gt;
&lt;p&gt;最简单的办法就是直接实现辗转相除法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# O(log n)&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;gcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;解法二&lt;/h3&gt;
&lt;p&gt;解法一中用到了取模运算, 对大整数, 取模是昂贵的操作. 如果一个数能同时整除x,y, 则必能同时被x-y, y整除. 而能同时被x-y, y整除则能同时整除x,y, 即x-y, y的公约数与x, y的公约数相同, 最大公约数也相同, 则有f(x, y) = f(x-y, y) (x &amp;gt;= y &amp;gt;= 0), 那么就可以不需要取模运算而转化成简单多的减法.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;gcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Euclidean_algorithm"&gt;http://en.wikipedia.org/wiki/Euclidean_algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="gcd"></category></entry><entry><title>回文数</title><link href="http://actberw.github.io/posts/algorithm/palindrome-number.html" rel="alternate"></link><updated>2014-09-05T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-05:posts/algorithm/palindrome-number.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Determine whether an integer is a palindrome. Do this without extra space&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以直接将数字反转判断两个数是否相等,  但是可能带来一个问题就是反转的时候整数溢出.
对于任意n位的数字，取n=5，数字95349为例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;95349&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="mi"&gt;95349&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;95349&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看出我们可以通过模10来取其最低位，除10^(n-1)来取其最高位，将其最高位和最低位进行比较，便可以得出当前是否符合回文要求了, 比较完最高位和最低位后，如何除掉这两位呢？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;95349&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;95349&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5349&lt;/span&gt;
&lt;span class="mi"&gt;95349&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9534&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如此便能完成掐头去尾了.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;is_palindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// 去高位&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 去低位&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;二进制的判断参见&lt;a href="/posts/algorithm/binary-bit.html"&gt;二进制是否为回文数&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://segmentfault.com/blog/code/1190000000453441"&gt;http://segmentfault.com/blog/code/1190000000453441&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/cklsoft/article/details/40862037"&gt;http://blog.csdn.net/cklsoft/article/details/40862037&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="c"></category></entry><entry><title>随机选取</title><link href="http://actberw.github.io/posts/algorithm/random-pick.html" rel="alternate"></link><updated>2014-09-05T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-05:posts/algorithm/random-pick.html</id><summary type="html"></summary><category term="algorithm"></category><category term="random"></category><category term="c"></category></entry><entry><title>随机数范围</title><link href="http://actberw.github.io/posts/algorithm/random-range.html" rel="alternate"></link><updated>2014-09-05T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-05:posts/algorithm/random-range.html</id><summary type="html">&lt;h3&gt;缩小范围&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RAND_MAX&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;扩大范围&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;rand()产生1~7之间的随机数，如何用rand()函数产生1~10之间的随机数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;扩大范围的处理是先用类似(rand7()-1)*7+rand7()) 构造一个大范围，然后在缩小范围处理.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// 循环实现 &lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rand10&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;49&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand7&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;rand7&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                 &lt;span class="c1"&gt;//大于40的，即41~49区间的取值舍弃&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 递归实现 &lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rand10&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;49&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand7&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;rand7&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rand10&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;概率问题&lt;/h3&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;已知随机数生成函数f()，返回0的概率是60%，返回1的概率是40%。根据f()求随机数函数g()，使返回0和1的概率是50%，不能用已有的随机生成库函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;分析: 调用f()两次即可，会出现4种结果(0,0), (0,1), (1,0), (1,1)，其中出现(0,1), (1,0)的概率是一样的，可以构造出等概率事件，比如出现(0,1)可返回0，出现(1,0)可返回1，如果出现其他两种情况则舍掉重新调用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="http://c-faq.com/lib/randrange.html"&gt;http://c-faq.com/lib/randrange.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dewen.io/q/15492?sort=newest"&gt;http://www.dewen.io/q/15492?sort=newest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.byywee.com/page/M0/S906/906096.html"&gt;http://www.byywee.com/page/M0/S906/906096.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.verydemo.com/demo_c180_i34806.html"&gt;http://www.verydemo.com/demo_c180_i34806.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sumnous.github.io/blog/2014/05/13/random-pick-function/"&gt;http://sumnous.github.io/blog/2014/05/13/random-pick-function/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="random"></category><category term="c"></category></entry><entry><title>洗牌算法之Knuth Shuffle</title><link href="http://actberw.github.io/posts/algorithm/shuffle.html" rel="alternate"></link><updated>2014-09-05T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-05:posts/algorithm/shuffle.html</id><summary type="html">&lt;p&gt;算法描述:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let X1, X2…. XN be the set of N numbers to be shuffled.&lt;/p&gt;
&lt;p&gt;Set j to N&lt;br /&gt;
Generate a random number R. (uniformly distributed between 0 and 1)&lt;br /&gt;
Set k to (jR+1). k is now a random integer, between 1 and j.&lt;br /&gt;
Exchange Xk and Xj&lt;br /&gt;
Decrease j by 1.&lt;br /&gt;
If j &amp;gt; 1, return to step 2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//_rand(int min, int max)是一个随机数生成器。&lt;/span&gt;
        &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/dwyane_mys/article/details/8053896"&gt;http://blog.csdn.net/dwyane_mys/article/details/8053896&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Random_permutation"&gt;http://en.wikipedia.org/wiki/Random_permutation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/v_july_v/article/details/7329314"&gt;http://blog.csdn.net/v_july_v/article/details/7329314&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/6127503/shuffle-array-in-c%5D"&gt;http://stackoverflow.com/questions/6127503/shuffle-array-in-c%5D&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="random"></category><category term="shuffle"></category></entry><entry><title>整数位的操作</title><link href="http://actberw.github.io/posts/algorithm/binary-bit.html" rel="alternate"></link><updated>2014-09-04T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-04:posts/algorithm/binary-bit.html</id><summary type="html">&lt;h3&gt;二进制表示1的个数&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# 解法1&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;# 解法2&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;# 解法 3&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;反转整数二进制表示&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# 解法1&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;bit_reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x01&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;# 解法2&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;bit_reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x55555555&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xaaaaaaaa&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x33333333&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xcccccccc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x0f0f0f0f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xf0f0f0f0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x00ff00ff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff00ff00&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x0000ffff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xffff0000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;returv&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;整数a, b(二进制表示), 把a变为b需要改变多少位&lt;/h3&gt;
&lt;p&gt;解决这个问题转化为计算a^b有多少个1.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;二分查找32位整数的前导0个数&lt;/h3&gt;
&lt;p&gt;Hacker's Delight上的代码, 程序思想是二分查找.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;nlz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
   &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;判断二进制是否为回文数&lt;/h3&gt;
&lt;p&gt;参见&lt;a href="/posts/algorithm/palindrome-number.html"&gt;十进制数是否为回文数&lt;/a&gt;, 二进制比较不能直接反转比较，因为反转后可能是个负数.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;is_palindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;     &lt;span class="c1"&gt;//能否用a判断?&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//去高位&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;//去低位&lt;/span&gt;
        &lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="algorithm"></category><category term="bit"></category><category term="c"></category></entry><entry><title>实现pow(x, n)函数</title><link href="http://actberw.github.io/posts/algorithm/pow.html" rel="alternate"></link><updated>2014-09-03T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-03:posts/algorithm/pow.html</id><summary type="html">&lt;p&gt;http://www.programcreek.com/2012/12/leetcode-powx-n/
http://fisherlei.blogspot.jp/2012/12/leetcode-powx-n.html&lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>整数相关题目</title><link href="http://actberw.github.io/posts/algorithm/matched-integer.html" rel="alternate"></link><updated>2014-09-02T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-02:posts/algorithm/matched-integer.html</id><summary type="html">&lt;h3&gt;符合条件的整数&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;任意给定的正整数N, 求一个最小的正整数M, 使得N*M的十进制表示形式只含有1和0.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;满足条件的两个数&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;输入一个数组和一个数字，在数组中查找两个数，使得它们的和正好是输入的那个数字。如果有多对数字的和等于输入的数字，输出任意一对即可.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;扩展:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果将“两个数字”改为“三个数字”或“任意个数字”时，如何求解？ 参见refer[0].&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://www.cnblogs.com/youxin/p/3367398.html"&gt;http://www.cnblogs.com/youxin/p/3367398.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;整数拆分&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;输入两个整数 n 和 m，从数列1，2，3.......n 中 随意取几个数, 使其和等于 m ,要求将其中所有的可能组合列出来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这道题就是一道典型的动态规划问题了，思路和背包问题差不多，m就相当于背包能容纳的重量了，就是从右往左校验，通过m，以及m-n进行下一次, 也就是当前是f(m,n)那接下来就是进行f(m,n-1)和f(m-n,n-1)进行递归.  而终止条件是n&amp;lt;=0, 以及sum&amp;lt;0, sum=0时候说明正好找到.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define N 10&lt;/span&gt;
&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    f(sum,n)= f(sum-n,n-1) + f(sum,n-1);&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;is_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Stack&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Stack&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Stack&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;print_stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Stack&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;find_factor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Stack&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;print_stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;find_factor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;find_factor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Stack&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;find_factor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;扩展:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将N拆分成多个整数相加和的形式，求出所有的形式, 参见refer[1].&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://blog.csdn.net/v_JULY_v/article/details/6419466"&gt;http://blog.csdn.net/v_JULY_v/article/details/6419466&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[1]&lt;a href="http://m.blog.csdn.net/blog/sangni007/8521005"&gt;http://m.blog.csdn.net/blog/sangni007/8521005&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;反转整数&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// c除法是向0方向取最接近精确值的整数, 不需要管正负, 这里没有考虑溢出情况.&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;valid number&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Validate if a given string is numeric.&lt;/p&gt;
&lt;p&gt;Some examples:
"0" =&amp;gt; true
" 0.1 " =&amp;gt; true
"abc" =&amp;gt; false
"1 a" =&amp;gt; false
"2e10" =&amp;gt; true
Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/kenden23/article/details/18696083"&gt;http://blog.csdn.net/kenden23/article/details/18696083&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;把字符串转换成数字&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;题目要求：
如果前面有空格开头，忽略掉开头的所有空格
如果发现没意义的字符，忽略之，并结束转换。即123ttyw -&amp;gt; 123
考虑负数额
如果溢出，则返回相应的最大正数和最大负数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// 判断符号&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INT_MAX&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;¦&lt;/span&gt;   &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; 
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="c1"&gt;// overflow&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;INT_MIN&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;INT_MAX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;dig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;INT_MAX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="c1"&gt;// overflow&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;INT_MIN&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;INT_MAX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://segmentfault.com/blog/code/1190000000452052"&gt;http://segmentfault.com/blog/code/1190000000452052&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category></entry><entry><title>asymmetric coroutine和symmetric coroutine</title><link href="http://actberw.github.io/posts/coroutine/asymmetric-vs-symmetric.html" rel="alternate"></link><updated>2014-09-01T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-09-01:posts/coroutine/asymmetric-vs-symmetric.html</id><summary type="html">&lt;p&gt;http://blog.csdn.net/wzzfeitian/article/details/8832017
http://www.crystalclearsoftware.com/soc/coroutine/coroutine/symmetric_coroutines.html
https://blog.kghost.info/2011/12/20/abstract-control-2-stackful-coroutine/&lt;/p&gt;
&lt;p&gt;https://blog.kghost.info/2011/11/15/abstract-control-1-stackless-coroutine/
https://blog.kghost.info/2011/12/20/abstract-control-2-stackful-coroutine/&lt;/p&gt;</summary></entry><entry><title>c字符串续行</title><link href="http://actberw.github.io/posts/c/concatenation.html" rel="alternate"></link><updated>2014-08-21T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-21:posts/c/concatenation.html</id><summary type="html">&lt;p&gt;示例:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;my_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Line 1 \&lt;/span&gt;
&lt;span class="s"&gt;                   Line 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;my_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Line 1 &amp;quot;&lt;/span&gt;
                  &lt;span class="s"&gt;&amp;quot;Line 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注: With a #define, you have to add an extra '\' to concatenate the two strings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define kMyString &amp;quot;Line 1&amp;quot;\&lt;/span&gt;
&lt;span class="cp"&gt;                  &amp;quot;Line 2&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://stackoverflow.com/questions/797318/how-to-split-a-string-literal-across-multiple-lines-in-c-objective-c"&gt;http://stackoverflow.com/questions/797318/how-to-split-a-string-literal-across-multiple-lines-in-c-objective-c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>python续行</title><link href="http://actberw.github.io/posts/python/line-join.html" rel="alternate"></link><updated>2014-08-21T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-21:posts/python/line-join.html</id><summary type="html">&lt;p&gt;pep8建议一行不要超过79个字符, python支持把逻辑行拆分成多个物理行(在编译时处理), 遵循一下规则.&lt;/p&gt;
&lt;h3&gt;显式连接&lt;/h3&gt;
&lt;p&gt;当一个物理行以反斜杠(backslash '\')结尾时(反斜杠不是字符串和注释的一部分), 会跟后面的行合并成一个逻辑行(删除掉反斜杠和后面的换行符), 但反斜杠后面不能加注释, 也不能用来续接关键词.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;1900&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2100&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; \
       &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; \
       &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Looks&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;隐式连接&lt;/h3&gt;
&lt;p&gt;在(), [], {} 的表达式可以拆分成多个物理行不需要显式的用反斜杠, 且隐式连接后面可以加注释.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;month_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Januari&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Februari&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Maart&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;These&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
               &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;April&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Mei&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Juni&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Dutch&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;
               &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Juli&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Augustus&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;September&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;months&lt;/span&gt;
               &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Oktober&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;November&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;December&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;字符串字面量的连接&lt;/h3&gt;
&lt;p&gt;python 支持将一个字符串字面量拆分成多行.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# 反斜杠后不能加注释&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;really&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; \
                         &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;across&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; 
&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;niss&lt;/span&gt;\
          &lt;span class="n"&gt;sfsfs&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="cp"&gt;# 可以加注释&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Wow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;works&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;allowed&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;
       &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;knew&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="https://docs.python.org/2.7/reference/lexical_analysis.html#explicit-line-joining"&gt;https://docs.python.org/2.7/reference/lexical_analysis.html#explicit-line-joining&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="line join"></category></entry><entry><title>浮点数</title><link href="http://actberw.github.io/posts/c/float.html" rel="alternate"></link><updated>2014-08-20T12:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-20:posts/c/float.html</id><summary type="html">&lt;h3&gt;浮点数的表示&lt;/h3&gt;
&lt;p&gt;http://www.cprogramming.com/tutorial/floating_point/understanding_floating_point_representation.html
http://www.geeksforgeeks.org/floating-point-representation-basics/&lt;/p&gt;
&lt;h3&gt;浮点数的比较&lt;/h3&gt;
&lt;p&gt;http://codereview.stackexchange.com/questions/6040/faster-comparison-to-infinity-in-python
http://www.geeksforgeeks.org/comparison-float-value-c/
http://www.cnblogs.com/FlyingBread/archive/2009/02/15/660206.html&lt;/p&gt;</summary><category term="c"></category><category term="float"></category></entry><entry><title>最近点对和最远点对</title><link href="http://actberw.github.io/posts/algorithm/point-distance.html" rel="alternate"></link><updated>2014-08-13T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-13:posts/algorithm/point-distance.html</id><summary type="html">&lt;h3&gt;最近点对&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在二维平面上的n个点中，如何快速的找出最近的一对点.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;见 &amp;lt;编程之美&amp;gt;
已知集合S中有n个点，分治法的思想就是将S进行拆分，分为2部分求最近点对。算法每次选择一条垂线L，将S拆分左右两部分为SL和SR，L一般取点集S中所有点的中间点的x坐标来划分，这样可以保证SL和SR中的点数目各为n/2，
依次找出这两部分中的最小点对距离：δL和δR，记SL和SR中最小点对距离δ = min(δL，δR)
以L为中心，δ为半径划分一个长带，最小点对还有可能存在于SL和SR的交界处，如下图2左图中的虚线带，p点和q点分别位于SL和SR的虚线范围内，在这个范围内，p点和q点之间的距离才会小于δ，最小点对计算才有意义&lt;/p&gt;
&lt;p&gt;http://sxnuwhui.blog.163.com/blog/static/137068373201264104915935/
http://my.oschina.net/u/923087/blog/279281&lt;/p&gt;
&lt;h3&gt;最远点对&lt;/h3&gt;
&lt;p&gt;http://blog.csdn.net/hackbuteer1/article/details/7484746&lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>xtrbackup备份原理</title><link href="http://actberw.github.io/posts/mysql/xtrabackup.html" rel="alternate"></link><updated>2014-08-10T21:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-10:posts/mysql/xtrabackup.html</id><summary type="html">&lt;p&gt;xtrabackup备份主要做两件事情:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;后台启动一个日志复制线程监控innodb日志文件，发现变动时复制到xtrabackup_logfile&lt;/li&gt;
&lt;li&gt;复制innodb数据文件, 并不是简单的复制，跟innodb同样的方式打开文件，打开数据字典( data dictionary)复制innodb page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当数据文件复制完成时，停止日志复制线程同时创建文件xtrabackup_checkpoints记录 LSN(log sequence number)信息.&lt;/p&gt;
&lt;p&gt;复制数据文件时每次读取1M大小(这个没法配置), 并检查每个page是否损坏.日志文件时每次512KB.&lt;/p&gt;
&lt;p&gt;innodb page(通常是16kb)包含一个日志序列号LSN, LSN是整个数据库的版本号, LSN的大小表示最近多久被修改过. 增量备份的原理就是复制LSN大于xtrabackup_checkpoints记录的最后LSN.&lt;/p&gt;
&lt;p&gt;有两种算法找到变动的page:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取所有的page比较LSN，mysql及Percona Server都支持 (数据库的大小影响备份的快慢)&lt;/li&gt;
&lt;li&gt;Percona Server 用bitmap实现了跟踪变化的innodb page 特性, 会快很多.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;xtrabackup调用innodb库来读数据文件，而innodb以read-write打开数据文件, 所以用xtrabackup备份的时候需要有对数据文件写的权限，但是并不会写文件.&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.percona.com/doc/percona-xtrabackup/2.2/xtrabackup_bin/creating_a_backup.html"&gt;http://www.percona.com/doc/percona-xtrabackup/2.2/xtrabackup_bin/creating_a_backup.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.percona.com/doc/percona-xtrabackup/2.2/xtrabackup_bin/implementation_details.html"&gt;http://www.percona.com/doc/percona-xtrabackup/2.2/xtrabackup_bin/implementation_details.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="mysql"></category><category term="xtrabackup"></category></entry><entry><title>三角形的面积</title><link href="http://actberw.github.io/posts/algorithm/triangle.html" rel="alternate"></link><updated>2014-08-10T20:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-10:posts/algorithm/triangle.html</id><summary type="html">&lt;h3&gt;已知三边(a, b, c)求三角形面积.&lt;/h3&gt;
&lt;p&gt;海伦公式:
假设三角形三边分别为(a, b, c), 则三角形的面积&lt;br /&gt;
$S = \sqrt{p(p-a)(p-b)(p-c)}$, 其中$p=\frac{a + b+ c}{2}$&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;space&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;已知平面三点的坐标求三角形的面积&lt;/h3&gt;
&lt;p&gt;利用向量叉乘
$S = \frac{1}{2}|\overrightarrow{AB}||\overrightarrow{AC}| * sign\angle{A} = \frac{1}{2}|\overrightarrow{AB} * \overrightarrow{AC}|$&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kt"&gt;point_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;space&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;point_t&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;point_t&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;point_t&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;point_t&lt;/span&gt; &lt;span class="n"&gt;AB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;AC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;AC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;AB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;AC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;refer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sxyd.sdut.edu.cn/gaoshu1/lesson/7.4%20%20shuliangji.htm"&gt;http://sxyd.sdut.edu.cn/gaoshu1/lesson/7.4%20%20shuliangji.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/fox64194167/article/details/8147460"&gt;http://blog.csdn.net/fox64194167/article/details/8147460&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="triangle"></category></entry><entry><title>xtrabackup安装及使用</title><link href="http://actberw.github.io/posts/mysql/xtrabackup-install.html" rel="alternate"></link><updated>2014-08-10T20:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-10:posts/mysql/xtrabackup-install.html</id><summary type="html">&lt;h3&gt;安装&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.percona.com/redir/downloads/XtraBackup/LATEST/deb/precise/x86_64/percona-xtrabackup_2.1.6-702-1.precise_amd64.deb&lt;/span&gt;
&lt;span class="cp"&gt;# 可能需要安装依赖:libdbd-mysql-perl &lt;/span&gt;
&lt;span class="n"&gt;dpkg&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;percona&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xtrabackup_2&lt;/span&gt;&lt;span class="mf"&gt;.1.6&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;702&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="n"&gt;precise_amd64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deb&lt;/span&gt;
&lt;span class="cp"&gt;# 安装完成后会产生四个命令行工具:innobackupex, xtrabackup, xbcrypt, xbstream&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用innobackupex增量备份&lt;/h3&gt;
&lt;p&gt;innobackupex 是个perl脚本,封装xtrabackup,会根据mysql服务器得版本选择xtrabackup得版本, innobackupex可以备份myisam和innodb表, 同时也会备份表定义文件(.frm).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# first setp full backup&lt;/span&gt;
&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysql_backup&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%Y-%m-%d&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="n"&gt;innobackupex&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cnf&lt;/span&gt;  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;parallel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="n"&gt;shouldn&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="cp"&gt;# second setp incremental backup&lt;/span&gt;
&lt;span class="n"&gt;innobackupex&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cnf&lt;/span&gt;  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;incremental&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;parallel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;incremental&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;basedir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%H&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;

&lt;span class="cp"&gt;# third setp another incremental backup&lt;/span&gt;
&lt;span class="n"&gt;innobackupex&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cnf&lt;/span&gt;  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;incremental&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;parallel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;incremental&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;basedir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%H&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;

&lt;span class="cp"&gt;# fourth setp prepare backup, -redo-only should be used when merging all incrementals except the last one&lt;/span&gt;
&lt;span class="n"&gt;innobackupex&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;redo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;BASE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kt"&gt;DIR&lt;/span&gt;
&lt;span class="n"&gt;innobackupex&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;incremental&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;INCREMENTAL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kt"&gt;DIR&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;redo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;BASE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kt"&gt;DIR&lt;/span&gt;
&lt;span class="n"&gt;innobackupex&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="n"&gt;BASE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kt"&gt;DIR&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;incremental&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;INCREMENTAL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kt"&gt;DIR&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="cp"&gt;# fifth step&lt;/span&gt;
&lt;span class="n"&gt;innobackupex&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="n"&gt;BASE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kt"&gt;DIR&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;  &lt;span class="n"&gt;iblog&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;

&lt;span class="cp"&gt;# six step&lt;/span&gt;
&lt;span class="n"&gt;innobackupex&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;back&lt;/span&gt; &lt;span class="n"&gt;BASE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kt"&gt;DIR&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt; &lt;span class="n"&gt;datadir&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.percona.com/doc/percona-xtrabackup/2.2/xtrabackup_bin/incremental_backups.html"&gt;http://www.percona.com/doc/percona-xtrabackup/2.2/xtrabackup_bin/incremental_backups.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.percona.com/doc/percona-xtrabackup/2.2/innobackupex/incremental_backups_innobackupex.html"&gt;http://www.percona.com/doc/percona-xtrabackup/2.2/innobackupex/incremental_backups_innobackupex.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="mysql"></category><category term="xtrabackup"></category></entry><entry><title>vim 快捷技巧</title><link href="http://actberw.github.io/posts/vim/trick.html" rel="alternate"></link><updated>2014-08-09T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-09:posts/vim/trick.html</id><summary type="html">&lt;h3&gt;快速操作符号内的内容&lt;/h3&gt;
&lt;p&gt;以下命令可以对标点内的内容进行操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ci'、ci"、ci(、ci[、ci{、ci&amp;lt; - 分别更改这些配对标点符号中的文本内容&lt;/li&gt;
&lt;li&gt;di'、di"、di(或dib、di[、di{或diB、di&amp;lt; - 分别删除这些配对标点符号中的文本内容&lt;/li&gt;
&lt;li&gt;yi'、yi"、yi(、yi[、yi{、yi&amp;lt; - 分别复制这些配对标点符号中的文本内容&lt;/li&gt;
&lt;li&gt;vi'、vi"、vi(、vi[、vi{、vi&amp;lt; - 分别选中这些配对标点符号中的文本内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外如果把上面的i改成a可以连配对标点一起操作。&lt;/p&gt;</summary><category term="vim"></category></entry><entry><title>c数组与指针的区别</title><link href="http://actberw.github.io/posts/c/point-vs-array.html" rel="alternate"></link><updated>2014-08-07T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-07:posts/c/point-vs-array.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;指针是变量可以进行修改, 数组名不是变量不能进行修改&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# legal&lt;/span&gt;
&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;# illegal&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数组传递给函数被转换为指针&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the array is the operand of a unary “&amp;amp;” operator (so &amp;amp;arr yields the address of the array, not the address of its first element; same address, different type).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;When the array is the operand of a unary “sizeof” operator (so sizeof arr yields the size of the array, not the size of a pointer).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://eli.thegreenplace.net/2009/10/21/are-pointers-and-arrays-equivalent-in-c/"&gt;http://eli.thegreenplace.net/2009/10/21/are-pointers-and-arrays-equivalent-in-c/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.360doc.com/content/11/1031/23/1317564_160688964.shtml"&gt;http://www.360doc.com/content/11/1031/23/1317564_160688964.shtml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="c"></category><category term="array"></category><category term="poiner"></category></entry><entry><title>continuation</title><link href="http://actberw.github.io/posts/coroutine/continuation.html" rel="alternate"></link><updated>2014-08-06T21:44:18+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-06:posts/coroutine/continuation.html</id><summary type="html"></summary></entry><entry><title>漏洞库</title><link href="http://actberw.github.io/posts/security/cve.html" rel="alternate"></link><updated>2014-08-06T21:44:18+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-06:posts/security/cve.html</id><summary type="html"></summary></entry><entry><title>Exploit和shellcode简介</title><link href="http://actberw.github.io/posts/security/exploit.html" rel="alternate"></link><updated>2014-08-06T21:44:18+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-06:posts/security/exploit.html</id><summary type="html">&lt;p&gt;refer:&lt;br /&gt;
- &lt;a href="http://badishi.com/on-vulnerabilities-exploits-and-shellcodes/"&gt;http://badishi.com/on-vulnerabilities-exploits-and-shellcodes/&lt;/a&gt;
- &lt;a href="http://www.exploit-db.com/"&gt;http://www.exploit-db.com/&lt;/a&gt;
- &lt;a href="http://www.clevcode.org/cve-2014-3153-exploit/"&gt;http://www.clevcode.org/cve-2014-3153-exploit/&lt;/a&gt;
- &lt;a href="http://www.seckungfu.com/"&gt;http://www.seckungfu.com/&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Iterator 和 Generator</title><link href="http://actberw.github.io/posts/python/generator-vs-iterator.html" rel="alternate"></link><updated>2014-08-06T21:44:18+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-06:posts/python/generator-vs-iterator.html</id><summary type="html"></summary></entry><entry><title>硬盘(hard disk drive)构造</title><link href="http://actberw.github.io/posts/misc/hdd.html" rel="alternate"></link><updated>2014-08-06T21:44:18+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-06:posts/misc/hdd.html</id><summary type="html">&lt;p&gt;Zone bit recording 技术&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.programlife.net/disk-struct.html"&gt;http://www.programlife.net/disk-struct.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="hdd"></category><category term="linux"></category><category term="zbr"></category></entry><entry><title>赛马问题</title><link href="http://actberw.github.io/posts/interview/horse-race.html" rel="alternate"></link><updated>2014-08-06T21:44:18+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-06:posts/interview/horse-race.html</id><summary type="html">&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hsiq.blogspot.jp/2008/08/blog-post_28.html"&gt;http://hsiq.blogspot.jp/2008/08/blog-post_28.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>openstack</title><link href="http://actberw.github.io/posts/misc/openstack-sum.html" rel="alternate"></link><updated>2014-08-06T21:44:18+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-06:posts/misc/openstack-sum.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;openstack简介&lt;br /&gt;
  OpenStack是一个由rackspace和NSNA于2010年发布的云计算平台, 旨在为公有云和私有云提供一个易于扩展的、功能丰富的解决方案，也可以说OpenStack是一个云计算操作系统，它整合各种底层硬件硬件资源，为系统管理员提供Web界面的控制面板以方便资源管理，为开发者的应用程序提供统一管理接口，为终端用户提供无缝的透明的云计算服务。最近的icehouse版本主要包含了10个核心组件：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算(Nova)&lt;/li&gt;
&lt;li&gt;对象存储(Swift)&lt;/li&gt;
&lt;li&gt;块存储(Cinder)&lt;/li&gt;
&lt;li&gt;镜像(Glance)&lt;/li&gt;
&lt;li&gt;网络(Neutron)&lt;/li&gt;
&lt;li&gt;身份认证(Keystone)&lt;/li&gt;
&lt;li&gt;控制面板(Horizon)&lt;/li&gt;
&lt;li&gt;计量/监控服务(Ceilometer)&lt;/li&gt;
&lt;li&gt;编排组织服务(Heat)&lt;/li&gt;
&lt;li&gt;数据库服务(Trove)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;openstack部署  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;部署模型一般是Three-node architecture, 分别是:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制节点&lt;/li&gt;
&lt;li&gt;网络节点&lt;/li&gt;
&lt;li&gt;计算机点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;潜在的技术难点   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络&lt;br /&gt;
虚拟机比较多的情况下，虚拟网络会更加复杂, CPU需要消耗大量的资源匹配网络流表，灵活的网络管理会境地网络的性能。&lt;/li&gt;
&lt;li&gt;镜像风暴&lt;br /&gt;
当镜像较多且每个镜像都很大时会消耗更多的网络宽带和 IO。&lt;/li&gt;
&lt;li&gt;openstack api&lt;br /&gt;
每个openstack组件的api都监听单一端口，导致无法充分利用服务器资源，原生的dashboard使用同步方式调用api会导致用户端界面变慢&lt;/li&gt;
&lt;li&gt;资源调度&lt;br /&gt;
内置的默认资源调度可能无法满足复杂的业务需求&lt;/li&gt;
&lt;li&gt;异构存储&lt;br /&gt;
企业内部异构存储新旧不一, 架构不一需要整合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络设计&lt;br /&gt;
Neutron 实质是一个定义良好的框架用来驱动 L2-L7 层不同的底层网络技术来为第三方应用独立地提供租户隔离的虚拟网络服务。目前支持的有flat, flatdhcp, vlan, vxlan, nvgre, mpls, openflow等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary></entry><entry><title>linux shell 正则表达式(BREs,EREs,PREs)差异比较</title><link href="http://actberw.github.io/posts/misc/regex.html" rel="alternate"></link><updated>2014-08-06T21:44:18+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-06:posts/misc/regex.html</id><summary type="html"></summary></entry><entry><title>Lexical and Dynamic Scoping</title><link href="http://actberw.github.io/posts/misc/scope.html" rel="alternate"></link><updated>2014-08-06T21:44:18+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-06:posts/misc/scope.html</id><summary type="html"></summary></entry><entry><title>树的遍历</title><link href="http://actberw.github.io/posts/tree/traverse.html" rel="alternate"></link><updated>2014-08-06T21:44:18+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-06:posts/tree/traverse.html</id><summary type="html">&lt;p&gt;http://biaobiaoqi.me/blog/2013/04/27/travsal-binary-tree/&lt;/p&gt;</summary></entry><entry><title>树</title><link href="http://actberw.github.io/posts/tree/tree.html" rel="alternate"></link><updated>2014-08-06T21:44:18+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-06:posts/tree/tree.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;树的种类:&lt;ul&gt;
&lt;li&gt;无序树&lt;/li&gt;
&lt;li&gt;有序树&lt;ul&gt;
&lt;li&gt;二叉树&lt;ul&gt;
&lt;li&gt;完全二叉树&lt;/li&gt;
&lt;li&gt;满二叉树&lt;/li&gt;
&lt;li&gt;自平衡二叉查找树(avl, red-black)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;霍夫曼树&lt;/li&gt;
&lt;li&gt;B树(B+, B*)&lt;/li&gt;
&lt;li&gt;trie树(后缀树)&lt;/li&gt;
&lt;li&gt;lsm树&lt;/li&gt;
&lt;li&gt;COLA&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary></entry><entry><title>c运算符优先级</title><link href="http://actberw.github.io/posts/c/operator-precedence.html" rel="alternate"></link><updated>2014-08-06T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-06:posts/c/operator-precedence.html</id><summary type="html">&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.difranco.net/compsci/C_Operator_Precedence_Table.htm"&gt;http://www.difranco.net/compsci/C_Operator_Precedence_Table.htm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="c"></category></entry><entry><title>c编译编译过程</title><link href="http://actberw.github.io/posts/c/c-compile-process.html" rel="alternate"></link><updated>2014-08-05T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-08-05:posts/c/c-compile-process.html</id><summary type="html">&lt;p&gt;总共包含四步:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预处理(Pre-Processing) (宏定义指令, 条件编译指令, 头文件)&lt;/li&gt;
&lt;li&gt;编译(Compiling)&lt;/li&gt;
&lt;li&gt;汇编(Assembling)&lt;/li&gt;
&lt;li&gt;链接(Linking)&lt;div class="highlight"&gt;&lt;pre&gt;   &lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;processing&lt;/span&gt;     &lt;span class="n"&gt;compiling&lt;/span&gt;          &lt;span class="n"&gt;assembling&lt;/span&gt;         &lt;span class="n"&gt;linking&lt;/span&gt;  
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;--------------&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;--------------&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;--------------&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;------------&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;binary&lt;/span&gt;  
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cpp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;gcc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;gcc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;gcc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gcc&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;ld&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;</summary><category term="c"></category><category term="compile"></category></entry><entry><title>索引信息</title><link href="http://actberw.github.io/posts/mysql/index.html" rel="alternate"></link><updated>2014-07-20T20:44:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-07-20:posts/mysql/index.html</id><summary type="html">&lt;p&gt;http://www.mysqlperformanceblog.com/2011/10/06/when-does-innodb-update-table-statistics-and-when-it-can-bite/&lt;/p&gt;</summary><category term="mysql"></category></entry><entry><title>mysql innodb 事务</title><link href="http://actberw.github.io/posts/mysql/transation.html" rel="alternate"></link><updated>2014-07-15T20:44:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-07-15:posts/mysql/transation.html</id><summary type="html"></summary></entry><entry><title>mysql中的引号</title><link href="http://actberw.github.io/posts/mysql/quote.html" rel="alternate"></link><updated>2014-07-10T20:44:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-07-10:posts/mysql/quote.html</id><summary type="html">&lt;p&gt;mysql字符串指用单引号(‘'’)或双引号(‘"’)引起来的字符序列。例如：&lt;/p&gt;
&lt;p&gt;'a string'&lt;/p&gt;
&lt;p&gt;"another string"&lt;/p&gt;
&lt;p&gt;如果SQL服务器模式启用了ANSI_QUOTES，可以只用单引号引用字符串。用双引号引用的字符串被解释为一个识别符。&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dev.mysql.com/doc/refman/5.6/en/string-literals.html"&gt;http://dev.mysql.com/doc/refman/5.6/en/string-literals.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dev.mysql.com/doc/refman/5.6/en/sql-mode.html#sqlmode_ansi_quotes"&gt;http://dev.mysql.com/doc/refman/5.6/en/sql-mode.html#sqlmode_ansi_quotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://segmentfault.com/q/1010000000236690"&gt;http://segmentfault.com/q/1010000000236690&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="mysql"></category><category term="quote"></category></entry><entry><title>素数算法</title><link href="http://actberw.github.io/posts/algorithm/prime-number.html" rel="alternate"></link><updated>2014-06-15T19:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-15:posts/algorithm/prime-number.html</id><summary type="html">&lt;p&gt;素数的定义: 除了能被1和它本身整除而不能被其他任何数整除的数。根据素数定义 只需要用2到n-1去除n，如果都除不尽，则n是素数，否则，只要其中有一个数能整除则n不是素数。&lt;/p&gt;
&lt;h3&gt;原始算法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;is_primer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/*若整除则为假，否则为真*/&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;从2到sqrt(N)的整数是否整除N&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;is_primer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/*若整除则为假，否则为真*/&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;改进去掉偶数得判断(i+=2)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;is_primer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cm"&gt;/*若整除则为假，否则为真*/&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;筛选算法&lt;/h3&gt;
&lt;p&gt;更高效地素数判断方法应该是将素数预先保存到一个素数表中，当判断一个数是否为素数时，直接查表即可。这种方法需要解决两个问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;怎样快速得到素数表 (埃拉托斯特尼筛法)&lt;/li&gt;
&lt;li&gt;怎样减少素数表的大小 (采用位图数据结构或者2~max_int的所有素数顺序存在内存里面用二分查找或者用hashtable)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;埃拉托斯特尼筛法(参见[1]).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于1到n全部整数, 逐个判断它们是否是素数, 找出一个非素数, 就把它挖掉, 最后剩下的就是素数。具体方法是： &amp;lt;1&amp;gt; 定义primer[i] = true (primer也可以用bitmap存储); &amp;lt;2&amp;gt; 从2开始, 依次遍历整个primer(直到sqrt(N)), 如果primer[i]=true,则primer[j]=false j ∈ {n², n²+n, n²+2n, ..., limit}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define N 1000&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;//init&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;随机算法(参见[3])&lt;/h3&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[1]&lt;a href="http://dongxicheng.org/structure/prime/"&gt;http://dongxicheng.org/structure/prime/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2]&lt;a href="http://coolshell.cn/articles/3738.html"&gt;http://www.zhihu.com/question/19668324&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3]&lt;a href="http://www.zhihu.com/question/19668324"&gt;http://www.zhihu.com/question/19668324&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[4]&lt;a href="http://program-think.blogspot.com/2011/12/prime-algorithm-1.html"&gt;http://program-think.blogspot.com/2011/12/prime-algorithm-1.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="prime number"></category></entry><entry><title>栈和队列</title><link href="http://actberw.github.io/posts/adt/stack-and-queue.html" rel="alternate"></link><updated>2014-06-13T19:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-13:posts/adt/stack-and-queue.html</id><summary type="html">&lt;p&gt;应用:
- 中缀表达式转后缀表达式
- 表达式(后缀)求值&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/79267/"&gt;http://blog.jobbole.com/79267/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/52367/"&gt;http://blog.jobbole.com/52367/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="data structure"></category><category term="stack"></category><category term="queue"></category></entry><entry><title>奇偶检验</title><link href="http://actberw.github.io/posts/algorithm/parity.html" rel="alternate"></link><updated>2014-06-13T18:30:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-13:posts/algorithm/parity.html</id><summary type="html">&lt;p&gt;奇偶校验位是一个表示给定位数的二进制数中1的个数是奇数还是偶数的二进制数。奇偶校验位是最简单的错误检测码。&lt;/p&gt;
&lt;p&gt;奇偶校验位有两种类型：偶校验位与奇校验位。如果一组给定数据位中1的个数是奇数，那么偶校验位就置为1反之则为0，从而使得总的1的个数是偶数。如果给定一组数据位中1的个数是偶数，那么奇校验位就置为1反之为0，使得总的1的个数是奇数。偶校验实际上是循环冗余校验的一个特例，通过多项式x + 1得到1位CRC。&lt;/p&gt;
&lt;p&gt;如何判断给定位数的二进制数中1的个数是奇数还是偶数的二进制数(参见&lt;a href="/posts/algorithm/binary-bit.html"&gt;整数位的操作&lt;/a&gt;), n为待检查得数字。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* Function to get parity of number n. It returns 1&lt;/span&gt;
&lt;span class="cm"&gt; * if n has odd parity, and returns 0 if n has even&lt;/span&gt;
&lt;span class="cm"&gt; * parity&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="c1"&gt;//解法1&lt;/span&gt;
&lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;get_parity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;unsigned&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;parity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;parity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;parity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//解法2&lt;/span&gt;
&lt;span class="k"&gt;unsigned&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;get_parity2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;unsigned&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;unsigned&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;parity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;unsigned&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bit_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;unsigned&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mh"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;bit_length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;parity&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;bit_length&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/u010993034/article/details/9316043"&gt;http://blog.csdn.net/u010993034/article/details/9316043&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.geeksforgeeks.org/write-a-c-program-to-find-the-parity-of-an-unsigned-integer/"&gt;http://www.geeksforgeeks.org/write-a-c-program-to-find-the-parity-of-an-unsigned-integer/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category></entry><entry><title>链表</title><link href="http://actberw.github.io/posts/adt/link-list.html" rel="alternate"></link><updated>2014-06-12T19:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-12:posts/adt/link-list.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义
链表是一组数据项的集合, 其中每个数据项是节点的一部分，每个节点包含指向下一个节点的链接. 对比数组链表的优缺点如下:可以高效的重排数据项例如插入节点的复杂度为O(1)，但是不能快速的访问任意的数据项，只能沿着链表一个一个节点的访问.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链表是动态数据结构，可以按需分配内存&lt;/li&gt;
&lt;li&gt;删除和增加节点复杂度为O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为额外的指针域需要更多的内存 &lt;/li&gt;
&lt;li&gt;只能从头节点顺序的访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单链表(Singly linked list)&lt;br /&gt;
它包含两个域，一个信息域和一个指针域。这个链接指向列表中的下一个节点，而最后一个节点则指向一个空值。&lt;/li&gt;
&lt;li&gt;双向链表(Doubly linked list)&lt;br /&gt;
每个节点有两个连接：一个指向前一个节点，（当此“连接”为第一个“连接”时，指向空值或者空列表）；而另一个指向下一个节点，（当此“连接”为最后一个“连接”时，指向空值或者空列表）&lt;/li&gt;
&lt;li&gt;循环链表(Circular list)&lt;br /&gt;
在一个 循环链表中, 首节点和末节点被连接在一起。这种方式在单向和双向链表中皆可实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;插入(在指定元素之前插入新结点)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;insert_afteri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;item_t&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//第i个元素之后插入, i从0开始&lt;/span&gt;
     &lt;span class="c1"&gt;//判断第i个节点是否存在&lt;/span&gt;
     &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pnode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;pnode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="n"&gt;pnode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pnode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;插入位置不存在&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//移动到i-1个节点&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pnode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;pnode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pnode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pnode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;i节点不存在&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反转&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//递归实现&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;rp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//非递归实现&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;pn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扩展问题  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Merge the two sorted link list in O(n) time and O(1) space  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;非递归实现，分析:分别用指针p1，p2来遍历两个链表，如果当前p1指向的数据小于p2指向的数据，则将p1指向的结点归入合并后的链表中，否则，将p2指向的结点归入合并后的链表中。如果有一个链表遍历结束，则把未结束的链表连接到合并后的链表尾部。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="nf"&gt;merge_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//非递归实现&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//初始化c&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;¦&lt;/span&gt;   &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;¦&lt;/span&gt;   &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;¦&lt;/span&gt;   &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;¦&lt;/span&gt;   &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;递归实现&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="nf"&gt;merge_link2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linkb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//递归实现，但是不满足空间复杂度O(1)要求&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;merge_link2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;merge_link2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Floyd 环查找算法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;两链表相交问题&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除排序数组中重复的元素&lt;/p&gt;
&lt;p&gt;public class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head == null || head.next == null)
            return head;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;http://m.blog.csdn.net/blog/sangni007/8218552
http://bluefish.blog.51cto.com/214870/68462&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/dxdxsmy/article/details/7346326"&gt;http://blog.csdn.net/dxdxsmy/article/details/7346326&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.acmerblog.com/category/data-struct/linear/"&gt;http://www.acmerblog.com/category/data-struct/linear/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/Jax/archive/2009/12/11/1621504.html"&gt;http://www.cnblogs.com/Jax/archive/2009/12/11/1621504.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="data structure"></category></entry><entry><title>矩阵乘法优化</title><link href="http://actberw.github.io/posts/algorithm/matrix.html" rel="alternate"></link><updated>2014-06-12T12:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-12:posts/algorithm/matrix.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.wikipedia.org/wiki/%E7%9F%A9%E9%98%B5%E6%8C%87%E6%95%B0"&gt;http://zh.wikipedia.org/wiki/%E7%9F%A9%E9%98%B5%E6%8C%87%E6%95%B0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/19706331"&gt;http://www.zhihu.com/question/19706331&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ituring.com.cn/article/17978"&gt;http://www.ituring.com.cn/article/17978&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/22854639"&gt;http://www.zhihu.com/question/22854639&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="matrix"></category></entry><entry><title>随机数及检验</title><link href="http://actberw.github.io/posts/algorithm/random.html" rel="alternate"></link><updated>2014-06-12T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-12:posts/algorithm/random.html</id><summary type="html">&lt;h3&gt;随机数算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;取中法&lt;/li&gt;
&lt;li&gt;线性同余法(Linear congruential generator)(参见参考[7])&lt;br /&gt;
 $N_{i+1} = aN_{i} + C$ (mod m), 其中其中a为乘子，C为增量，m为模. 产生的随机序列$R_n = N_i / m$.&lt;/li&gt;
&lt;li&gt;移位法&lt;/li&gt;
&lt;li&gt;梅森旋转算法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;检验&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;参数检验&lt;/li&gt;
&lt;li&gt;均匀性检验&lt;/li&gt;
&lt;li&gt;独立性检验&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[1]&lt;a href="http://blog.csdn.net/zmazon/article/details/17383521"&gt;http://blog.csdn.net/zmazon/article/details/17383521&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2]&lt;a href="http://wenku.baidu.com/view/0295fdd7b14e852458fb574e.html"&gt;http://wenku.baidu.com/view/0295fdd7b14e852458fb574e.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3]&lt;a href="http://wenku.baidu.com/view/bec3a060ddccda38376bafe4.html?from=related"&gt;http://wenku.baidu.com/view/bec3a060ddccda38376bafe4.html?from=related&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[4]&lt;a href="http://carlnerv.com/2014/c%E6%A0%87%E5%87%86%E5%BA%93%E9%87%8C%E7%9A%84rand.html"&gt;http://carlnerv.com/2014/c%E6%A0%87%E5%87%86%E5%BA%93%E9%87%8C%E7%9A%84rand.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[5]&lt;a href="http://www.dewen.org/q/15492"&gt;http://www.dewen.org/q/15492&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[6]&lt;a href="http://club.alibabatech.org/article_detail.htm?articleId=2"&gt;http://club.alibabatech.org/article_detail.htm?articleId=2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[7]&lt;a href="http://stackoverflow.com/questions/3932978/gcc-implementation-of-rand"&gt;http://stackoverflow.com/questions/3932978/gcc-implementation-of-rand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="random"></category></entry><entry><title>umask 命令</title><link href="http://actberw.github.io/posts/misc/umask.html" rel="alternate"></link><updated>2014-06-11T23:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-11:posts/misc/umask.html</id><summary type="html">&lt;p&gt;该命令用来设置限制新文件权限的掩码, 默认是022, umask 命令允许你设定文件创建时的缺省模式，对应每一类用户(文件属主、同组用户、其他用户)存在一个相应的umask值中的数字。对于文件来说，这一数字的最 大值分别是6。系统不允许你在创建一个文本文件时就赋予它执行权限，必须在创建后用chmod命令增加这一权限。目录则允许设置执行权限，这样针对目录来 说，umask中各个数字最大可以到7。
C = P &amp;amp; (~Q) , C: final file's permission, P: requested permission, Q: mask 
所以对于默认的(022) 文件的权限是:644(-rw-r--r--),  目录是:755(drwxr-xr-x)&lt;/p&gt;</summary><category term="linux"></category><category term="umask"></category></entry><entry><title>数组 part-6</title><link href="http://actberw.github.io/posts/adt/array-part-6.html" rel="alternate"></link><updated>2014-06-11T20:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-11:posts/adt/array-part-6.html</id><summary type="html">&lt;h3&gt;数组分割问题&lt;/h3&gt;
&lt;p&gt;扩展:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有两个序列a,b，大小都为n,序列元素的值任意整数，无序; 要求: 通过交换a,b中的元素，使序列a元素的和与序列b元素的和之间的差最小。&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="data structure"></category><category term="array"></category></entry><entry><title>数组 part-5</title><link href="http://actberw.github.io/posts/adt/array-part-5.html" rel="alternate"></link><updated>2014-06-11T19:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-11:posts/adt/array-part-5.html</id><summary type="html">&lt;p&gt;子数组积， 和， 递增&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从一列数中筛除尽可能少的数使得从左往右看，这些数是从小到大再从大到小的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/v_JULY_v/article/details/6419466"&gt;http://blog.csdn.net/v_JULY_v/article/details/6419466&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="data structure"></category><category term="array"></category></entry><entry><title>斐波纳契数列</title><link href="http://actberw.github.io/posts/algorithm/fibonacci.html" rel="alternate"></link><updated>2014-06-11T19:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-11:posts/algorithm/fibonacci.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;问题描述：Fibonacci数（Fibonacci Number）的定义是：$F_n = F_{n - 1} + F_{n - 2}$，并且$F_0$ = 0，$F_1$ = 1。对于任意指定的整数n（n ≥ 0），计算$F_n$的精确值，并分析算法的时间、空间复杂度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有下面几种解法.&lt;/p&gt;
&lt;h3&gt;递归法&lt;/h3&gt;
&lt;p&gt;根据Fibonacci的递推公式，对于输入的n，直接递归地调用相同的函数分别求出$F_{n - 1}$和$F_{n - 2}$，二者相加就是结果。递归的终止点就是递推方程的初值，即n取0或1的时候。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fibonacii&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fibonacii&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fibonacii&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;时间复杂度是O($2^n$)(实际上是黄金分割$\frac{1+\sqrt{5}}{2}$)，空间复杂度是O(n)。&lt;br /&gt;
这个算法的时间复杂度有着跟Fibonacci类似的递推方程：$T_n = T_{n - 1} + T_{n - 2} + O(1)$, 具体解法见下图:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先用特征方程求出Fibonacci通项
&lt;img alt="Fibonacci-recursion-complexity" src="/img/fibonacci-complexity.png" /&gt;&lt;/li&gt;
&lt;li&gt;设 $K_n$为计算Fn所需要的加法次数, $K_n$ = $K_{n-1}$ + $K_{n-2}$ + 1, $K_0$ = 0, $K_1$ = 0, $K_2$ = 1, 则有$K_n$ + 1 = $K_{n-1}$ + 1 + $K_{n-2}$ + 1, $K_n$ + 1 是斐波那契数列, $K_n$ = fibonacci(n+1) - 1, 所以O(fibonacci(n+1) - 1) = O(fibonacci(n+1))&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;递推法&lt;/h3&gt;
&lt;p&gt;虽然只是一字之差，但递推法的复杂度要小的多。这个方法就是按照递推方程，从n = 0和n = 1开始，逐个求出所有小于n的Fibonacci数，最后就可以算出F(n)。由于每次计算值需要用到前两个Fibonacci数，更小的数就可以丢弃了，可以将空间复杂度降到最低。算法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fibonacii2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;显然时间复杂度是O(n)，空间复杂度是O(1)。  &lt;/p&gt;
&lt;p&gt;比较一下递归法和递推法，二者都用了分治的思想——把目标问题拆为若干个小问题，利用小问题的解得到目标问题的解。二者的区别实际上就是普通分治算法和动态规划的区别。&lt;/p&gt;
&lt;h3&gt;矩阵法&lt;/h3&gt;
&lt;p&gt;我们把Fibonacci数列中相邻的两项：$F_n$和$F_{n - 1}$写成一个2 * 1的矩阵，然后对其进行变形&lt;/p&gt;
&lt;h3&gt;有关Fibonacci问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在递归计算$F_n$的时候，需要对较小的$F_{n-1}$，$F_{n-2}$，…, $F_l$, $F_0$精确计算多少次?&lt;br /&gt;
\begin{eqnarray*} 
F_n = F_{n-1} + F_{n-2}&lt;br /&gt;
   = (F_{n-2} + F_{n-3}) + (F_{n-3} + F_{n-4})
\end{eqnarray*}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;设$K_{n.m}$ 表示计算$F_n$时用到$F_m$的次数, 则有$K_{n.n-3} = K_{n.n-2} + K_{n.n-1}$ 是Fibonacci数列, 其中$K_{n.n-1}$ = 1 = fibonacci(2), $K_{n.n-2}$ = 2 = fibonacci(3),  $K_{n.0}$ = fibonacci(n+1)&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.gocalf.com/blog/calc-fibonacci.html"&gt;http://www.gocalf.com/blog/calc-fibonacci.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://061251008.blog.163.com/blog/static/240841720123157186395/"&gt;http://061251008.blog.163.com/blog/static/240841720123157186395/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category></entry><entry><title>数组 part-4</title><link href="http://actberw.github.io/posts/adt/array-part-4.html" rel="alternate"></link><updated>2014-06-11T18:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-11:posts/adt/array-part-4.html</id><summary type="html">&lt;h3&gt;数组最大值和最小值&lt;/h3&gt;
&lt;p&gt;分治法, 在N个数中求min和max, 需要分别求出前后N/2的min和max, 然后比较取较小的min, 较大的max, 时间复杂度依然是O(1.5N).&lt;/p&gt;
&lt;h3&gt;第K大数&lt;/h3&gt;
&lt;p&gt;K次冒泡就可以找到第K大的数，时间复杂度为O(kn)。快排是对冒泡的改进，这里我们也可以使用快排进行算法改进。步骤如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机选择一个支点&lt;/li&gt;
&lt;li&gt;将比支点大的数，放到数组左边；将比支点小的数放到数组右边；将支点放到中间(属于左部分)&lt;/li&gt;
&lt;li&gt;设左部分的长度为L&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;当&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="err"&gt;时，递归地在左部分找第&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="err"&gt;大的数&lt;/span&gt;
&lt;span class="err"&gt;当&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="err"&gt;时，递归地在有部分中找第&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;大的数&lt;/span&gt;
&lt;span class="err"&gt;当&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="err"&gt;时，返回左右两部分的分割点（即原来的支点），就是要求的第&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="err"&gt;大的数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;partion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;findk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;llen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 左部分的长度为L&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;llen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// !!&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;llen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;findk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;llen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;llen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;findk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://coolshell.cn/articles/8138.html"&gt;http://coolshell.cn/articles/8138.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://xfhnever.github.io/blog/2014/10/21/algorithm-findk/"&gt;http://xfhnever.github.io/blog/2014/10/21/algorithm-findk/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;最大的K个数&lt;/h3&gt;
&lt;p&gt;最简单的就是冒泡O(N * K), 也可以直接转化为求第K大数, 然后遍历数组打印所有比第K个数大的元素, 或者用求第K大数的快排方式.
或者用最小堆.&lt;/p&gt;
&lt;h3&gt;median of two sorted array&lt;/h3&gt;
&lt;p&gt;利用类似merge(合并两个有序数组)的操作找到中位数，利用两个分别指向A和B数组头的指针去遍历数组，然后统计元素个数，直到找到中位数，此时算法复杂度为O(n). 或者参照第K大数&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/zxzxy1988/article/details/8587244"&gt;http://blog.csdn.net/zxzxy1988/article/details/8587244&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="data structure"></category><category term="array"></category></entry><entry><title>数组 part-3</title><link href="http://actberw.github.io/posts/adt/array-part-3.html" rel="alternate"></link><updated>2014-06-11T17:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-11:posts/adt/array-part-3.html</id><summary type="html">&lt;h3&gt;后缀数组(Suffix Array)&lt;/h3&gt;</summary><category term="algorithm"></category><category term="data structure"></category><category term="array"></category></entry><entry><title>数组 part-2</title><link href="http://actberw.github.io/posts/adt/array-part-2.html" rel="alternate"></link><updated>2014-06-11T16:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-11:posts/adt/array-part-2.html</id><summary type="html">&lt;h3&gt;旋转排序数组(Rotated Sorted arrayrray )&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Suppose a sorted array is rotated at some pivot unknown to you beforehand (i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).You are given a target value to search. If found in the array return its index, otherwise return -1.
Search in Rotated Sorted Array, &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这道题目就是用二分查找的思路来解决, 中间用到了旋转数组的一些特性。以题目中的旋转数组为例, {3,4,5,1,2}, 我们可以有序数组经过旋转以后被分割为两段有序的数组, 比如此处被分为{3,4,5}{1,2}这样两个数组, 并且前半段数组中的数字肯定大于等于后半段的数组。我们找中间元素, 让其跟首尾元素素比较, 确定范围.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;middle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;middle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;middle&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
                &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;middle&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;middle&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;middle&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;扩展: 求最小值, 同样也是用二分查找, 参见refer[1].&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://segmentfault.com/blog/code/1190000000457723"&gt;http://segmentfault.com/blog/code/1190000000457723&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[1]&lt;a href="http://www.cnblogs.com/xwdreamer/archive/2012/05/07/2487520.html"&gt;http://www.cnblogs.com/xwdreamer/archive/2012/05/07/2487520.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="data structure"></category><category term="array"></category></entry><entry><title>数组 part-1</title><link href="http://actberw.github.io/posts/adt/array.html" rel="alternate"></link><updated>2014-06-11T15:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-11:posts/adt/array.html</id><summary type="html">&lt;p&gt;数组把相同类型得数据按照固定有序得方式组织起来, 使得存储空空间相邻, 可以通过 &lt;em&gt;索引访问&lt;code&gt;a[i]&lt;/code&gt;&lt;/em&gt;, 便于访问(O(1)), 但是不便于操作(O(n)). &lt;/p&gt;
&lt;h3&gt;数组(array)定义和初始化&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// 定义&lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// 定义和初始化 &lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;5&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// length也可以不指定&lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;5&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;数组(array)访问&lt;/h3&gt;
&lt;p&gt;数组元素可以通过索引访问, 索引必须保证是非负且小于数组大小. 数组名会产生一个指向数组首元素指针, 所以还可以通过指针访问.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// 索引访问&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// 指针访问&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外数组名指向组首元素地址, &lt;code&gt;&amp;amp;a&lt;/code&gt; 也指向组首元素地址, 但是意义不同参见&lt;a href="/posts/c/point-vs-array.html"&gt;数组于指针的区别&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;合并两个有序数组&lt;/h3&gt;
&lt;p&gt;类似归并排序, 参见&lt;a href="/posts/adt/link-list.html"&gt;合并链表&lt;/a&gt;&lt;/p&gt;</summary><category term="algorithm"></category><category term="data structure"></category><category term="array"></category></entry><entry><title>数据结构与算法汇总</title><link href="http://actberw.github.io/posts/algorithm/basic-data-structure.html" rel="alternate"></link><updated>2014-06-10T20:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-10:posts/algorithm/basic-data-structure.html</id><summary type="html">&lt;h3&gt;常见数据结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;线性: 数组(array), 链表(link list), 块状链表(数组+链表), 栈(stack), 队列(queue), hash表, 位图(bitmap)  &lt;/li&gt;
&lt;li&gt;树(tree): 堆(大顶堆、小顶堆), 二叉排序/查找树, trie树, 后缀树, 后缀树组, B+/B-, AVL树, Treap, 红黑树, splay树, 线段树, 树状数组  &lt;/li&gt;
&lt;li&gt;图: 图(graph)  &lt;/li&gt;
&lt;li&gt;其它: 并查集  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;常见算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基本思想: 分治, 贪心,动态规划, 回溯&lt;/li&gt;
&lt;li&gt;排序算法: 冒泡, 插入, 选择, 快排, 归并排序, 堆排序, 桶排序, 基数排序, 计数排序 &lt;/li&gt;
&lt;li&gt;图算法: 深度优先遍历与广度优先遍历, A*搜索算法, 最短路径, 最小生成树, 拓扑排序&lt;/li&gt;
&lt;li&gt;字符串算法: 字符串查找, hash算法, KMP算法, 相似度算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.luocong.com/dsaanotes/index-Z-H-13.htm"&gt;http://www.luocong.com/dsaanotes/index-Z-H-13.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dongxicheng.org/structure/structure-algorithm-summary/"&gt;http://dongxicheng.org/structure/structure-algorithm-summary/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.douban.com/note/46700342/"&gt;http://www.douban.com/note/46700342/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bigocheatsheet.com/"&gt;常见算法的时间复杂度&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category></entry><entry><title>算法设计范式(paradigm)</title><link href="http://actberw.github.io/posts/algorithm/design.html" rel="alternate"></link><updated>2014-06-10T19:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-10:posts/algorithm/design.html</id><summary type="html">&lt;h3&gt;分治法(divide and conquer)&lt;/h3&gt;
&lt;p&gt;字面上的解释是“分而治之”, 就是把一个复杂的问题分成K个的相同或相似的子问题, 直到最后子问题可以简单的直接求解, 原问题的解即子问题的解的合并. 特征:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该问题的规模缩小到一定的程度就可以容易地解决.&lt;/li&gt;
&lt;li&gt;该问题可以分解为若干个规模较小的相同问题, 即该问题具有最优子结构性质.&lt;/li&gt;
&lt;li&gt;利用该问题分解出的子问题的解可以合并为该问题的解&lt;/li&gt;
&lt;li&gt;该问题所分解出的各个子问题是相互独立的, 即子问题之间不包含公共的子子问题.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一条特征是绝大多数问题都可以满足的, 因为问题的计算复杂性一般是随着问题规模的增加而增加, 第二条特征是应用分治法的前提它也是大多数问题可以满足的, 此特征反映了递归思想的应用,
    第三条特征是关键, 能否利用分治法完全取决于问题是否具有第三条特征, 如果具备了第一条和第二条特征, 而不具备第三条特征, 则可以考虑用贪心法或动态规划法, 第四条特征涉及到分治法的效率, 如果各子问题是不独立的则分治法要做许多不必要的工作, 重复地解公共的子问题, 此时虽然可用分治法, 但一般用动态规划法较好.&lt;/p&gt;
&lt;h3&gt;动态规划(dynamic programming)&lt;/h3&gt;
&lt;p&gt;动态规划常常适用于有重叠子问题[2]和最优子结构性质的问题, 动态规划法试图仅仅解决每个子问题一次, 从而减少计算量： 一旦某个给定子问题的解已经算出, 则将其记忆化存储, 以便下次需要同一个子问题解之时直接查表. &lt;/p&gt;
&lt;h3&gt;贪心算法(greedy algorithms)&lt;/h3&gt;
&lt;h3&gt;回溯法(backtrack)&lt;/h3&gt;
&lt;p&gt;回溯算法实际上一个类似枚举的搜索尝试过程, 主要是在搜索尝试过程中寻找问题的解, 当发现已不满足求解条件时, 就“回溯”返回, 尝试别的路径. 回溯法就是对隐式图的深度优先搜索算法.
分支界定法(branch and bound)
    类似于回溯法, 也是一种在问题的解空间树T上搜索问题解的算法.但在一般情况下, 分支限界法与回溯法的求解目标不同.回溯法的求解目标是找出T中满足约束条件的所有解, 而分支限界法的求解目标则是找出满足约束条件的一个解, 或是在满足约束条件的解中找出使某一目标函数值达到极大或极小的解, 即在某种意义下的最优解.&lt;/p&gt;
&lt;h3&gt;线性规划(linear programming)&lt;/h3&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/steven_oyj/category/246990.html"&gt;http://www.cnblogs.com/steven_oyj/category/246990.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category></entry><entry><title>Latency number</title><link href="http://actberw.github.io/posts/misc/latency-number.html" rel="alternate"></link><updated>2014-06-10T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-10:posts/misc/latency-number.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;Latency Comparison Numbers&lt;/span&gt;
&lt;span class="gh"&gt;--------------------------&lt;/span&gt;
L1 cache reference                            0.5 ns
Branch mispredict                             5   ns
L2 cache reference                            7   ns             14x L1 cache
Mutex lock/unlock                            25   ns
Main memory reference                       100   ns             20x L2 cache, 200x L1 cache
Compress 1K bytes with Zippy              3,000   ns
Send 1K bytes over 1 Gbps network        10,000   ns    0.01 ms
Read 4K randomly from SSD*              150,000   ns    0.15 ms
Read 1 MB sequentially from memory      250,000   ns    0.25 ms
Round trip within same datacenter       500,000   ns    0.5  ms
Read 1 MB sequentially from SSD*      1,000,000   ns    1    ms  4X memory
Disk seek                            10,000,000   ns   10    ms  20x datacenter roundtrip
Read 1 MB sequentially from disk     20,000,000   ns   20    ms  80x memory, 20X SSD
Send packet CA-&amp;gt;Netherlands-&amp;gt;CA     150,000,000   ns  150    ms

&lt;span class="gh"&gt;Notes&lt;/span&gt;
&lt;span class="gh"&gt;-----&lt;/span&gt;
1 ns = 10-9 seconds
1 ms = 10-3 seconds
&lt;span class="m"&gt;*&lt;/span&gt; Assuming ~1GB/sec SSD
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/jboner/2841832"&gt;https://gist.github.com/jboner/2841832&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.eecs.berkeley.edu/~rcs/research/interactive_latency.html"&gt;http://www.eecs.berkeley.edu/~rcs/research/interactive_latency.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="linux"></category><category term="c"></category><category term="latency"></category></entry><entry><title>算法的复杂度面试题目</title><link href="http://actberw.github.io/posts/interview/complexity-interview.html" rel="alternate"></link><updated>2014-06-07T19:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-07:posts/interview/complexity-interview.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;简述：实现一个函数，对一个正整数n，算得到1需要的最少操作次数：
如果n为偶数，将其处以2；如果n为奇数，可以加1或减1；一直处理下去。
要求：实现函数（实现尽可能高效）int func(unsigned int n)；n为输入，返回最小的运算次数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zhiqiang.org/blog/science/computer-science/complexity-of-recursive-algorithm.html"&gt;http://zhiqiang.org/blog/science/computer-science/complexity-of-recursive-algorithm.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://geeksquiz.com/algorithms/analysis-of-algorithms/"&gt;http://geeksquiz.com/algorithms/analysis-of-algorithms/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="algorithm analysis"></category></entry><entry><title>母函数(generating function)</title><link href="http://actberw.github.io/posts/complexity/generating-function.html" rel="alternate"></link><updated>2014-06-07T18:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-07:posts/complexity/generating-function.html</id><summary type="html">&lt;h4&gt;refer:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;http://www.cnblogs.com/python27/archive/2011/12/09/2282486.html&lt;/li&gt;
&lt;li&gt;http://www.doc88.com/p-39037791334.html&lt;/li&gt;
&lt;li&gt;http://blog.sina.com.cn/s/blog_48258fbe0100gcy8.html&lt;/li&gt;
&lt;li&gt;http://www.guokr.com/blog/68001/&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>递归算法的复杂度分析</title><link href="http://actberw.github.io/posts/complexity/recursion-complexity.html" rel="alternate"></link><updated>2014-06-07T17:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-07:posts/complexity/recursion-complexity.html</id><summary type="html">&lt;p&gt;在算法分析中，当一个算法中包含递归调用时，其时间复杂度的分析会转化为一个递归方程求解。实际上，这个问题是数学上求解渐近阶的问题，而递归方程的形式多种多样，其求解方法也是不一而足，比较常用的有以下四种方法:&lt;/p&gt;
&lt;h3&gt;代入法(Substitution Method)&lt;/h3&gt;
&lt;p&gt;代入法的基本步骤是先推测递归方程的显式解，然后用数学归纳法来验证该解是否合理。&lt;/p&gt;
&lt;h3&gt;Recurrence Tree Method&lt;/h3&gt;
&lt;p&gt;For example consider the recurrence relation 
$T(n) = T(\frac{n}{4}) + T(\frac{n}{2}) + cn^2$&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;       &lt;span class="n"&gt;cn2&lt;/span&gt;
     &lt;span class="o"&gt;/&lt;/span&gt;      \
 &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we further break down the expression $T(\frac{n}{4})$ and $T(\frac{n}{2})$, 
we get following recursion tree.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;              &lt;span class="n"&gt;cn2&lt;/span&gt;
          &lt;span class="o"&gt;/&lt;/span&gt;         &lt;span class="err"&gt;\&lt;/span&gt;      
       &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;       &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
      &lt;span class="o"&gt;/&lt;/span&gt;      &lt;span class="err"&gt;\&lt;/span&gt;          &lt;span class="o"&gt;/&lt;/span&gt;     \
  &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Breaking down further gives us following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;                 &lt;span class="n"&gt;cn2&lt;/span&gt;
            &lt;span class="o"&gt;/&lt;/span&gt;            &lt;span class="err"&gt;\&lt;/span&gt;      
       &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;          &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
       &lt;span class="o"&gt;/&lt;/span&gt;      &lt;span class="err"&gt;\&lt;/span&gt;            &lt;span class="o"&gt;/&lt;/span&gt;      \
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;   &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;
 &lt;span class="o"&gt;/&lt;/span&gt;    &lt;span class="err"&gt;\&lt;/span&gt;      &lt;span class="o"&gt;/&lt;/span&gt;    &lt;span class="err"&gt;\&lt;/span&gt;    &lt;span class="o"&gt;/&lt;/span&gt;    &lt;span class="err"&gt;\&lt;/span&gt;       &lt;span class="o"&gt;/&lt;/span&gt;    \
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To know the value of T(n), we need to calculate sum of tree 
nodes level by level. If we sum the above tree level by level, 
we get the following series
$T(n)  = c(n^2 + \frac{5}{16}(n^2) + \frac{25}{256}(n^2)) + ....$
The above series is geometrical progression with ratio $\frac{5}{16}$.&lt;/p&gt;
&lt;p&gt;To get an upper bound, we can sum the infinite series. &lt;/p&gt;
&lt;p&gt;We get the sum as $(n^2)/(1 - \frac{5}{16})$ which is $O(n^2)$&lt;/p&gt;
&lt;h3&gt;公式法(Master Method)&lt;/h3&gt;
&lt;p&gt;设常数a &amp;gt;= 1，b &amp;gt; 1，f(n)为函数，T(n)为非负整数，T(n) = a T(n / b) + f(n)，则有:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若f(n)=O($n^{log_{b}a−ε}$),ε&amp;gt;0 ，那么T(n)=Θ($nlog_{b}a$) 。  &lt;/li&gt;
&lt;li&gt;若f(n)=Θ($n^{log_{b}a}$) ，那么T(n)=Θ($n^{log_{b}a}logn$) 。  &lt;/li&gt;
&lt;li&gt;若f(n)=Ω($n^{log_{b}a+ε}$),ε&amp;gt;0 ，并且对于某个常数c &amp;lt; 1和充分大的n有af(n/b)≤cf(n) ，那么T(n)=Θ(f(n)) 。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如常见的二分查找算法，时间复杂度的递推方程为T(n) = T(n / 2) + θ(1)，显然有nlogba=n0=Θ(1) ，满足Master定理第二条，可以得到其时间复杂度为T(n) = θ(log n)  &lt;/p&gt;
&lt;h3&gt;迭代法(Iteration Method)&lt;/h3&gt;
&lt;p&gt;迭代法的基本步骤是迭代地展开递归方程的右端，使之成为一个非递归的和式，然后通过对和式的估计来达到对方程左端即方程的解的估计。适用于: Tn = T(n-1 +N , Tn = Tn/2 + 1,   T(n) = 3T(n/4) + O(n), 对于Tn = 2Tn/2 +1, Tn = 2Tn/2 + n, 直接令n = $2^k$ 迭代&lt;/p&gt;
&lt;h3&gt;母函数法&lt;/h3&gt;
&lt;p&gt;参见参考[2],[4]和&lt;a href="/mu-han-shu-generating-function.html"&gt;母函数介绍&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;差分方程法(Difference Formula Method)&lt;/h3&gt;
&lt;p&gt;参见参考[4]&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://www.geeksforgeeks.org/analysis-algorithm-set-4-master-method-solving-recurrences/"&gt;http://www.geeksforgeeks.org/analysis-algorithm-set-4-master-method-solving-recurrences/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[1]&lt;a href="http://www.gocalf.com/blog/algorithm-complexity-and-master-theorem.html"&gt;http://www.gocalf.com/blog/algorithm-complexity-and-master-theorem.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2]&lt;a href="http://www.cnblogs.com/python27/archive/2011/12/09/2282486.html"&gt;http://www.cnblogs.com/python27/archive/2011/12/09/2282486.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3]&lt;a href="http://blog.csdn.net/metasearch/article/details/4428865"&gt;http://blog.csdn.net/metasearch/article/details/4428865&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[4]&lt;a href="http://wenku.baidu.com/view/92d328ea551810a6f52486db.html"&gt;http://wenku.baidu.com/view/92d328ea551810a6f52486db.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[5]&lt;a href="http://www.acmerblog.com/analysis-recurrences-5084.html"&gt;http://www.acmerblog.com/analysis-recurrences-5084.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm analysis"></category></entry><entry><title>循环的时间复杂度</title><link href="http://actberw.github.io/posts/complexity/loop-complexity.html" rel="alternate"></link><updated>2014-06-07T16:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-07:posts/complexity/loop-complexity.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;O(1)&lt;br /&gt;
  一个函数调用或是一组语句都认为是O(1)的复杂度  (如果没有调用不包含循环，递归或其他非常量复杂度的函数), 如果循环的次数是一个常量，则也认为是 O(1).&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;O(n)&lt;br /&gt;
  如果在一个大小为n循环中，循环变量按照一个常量C递增或递减，这个循环的复杂度就为O(n).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// c是常量  &lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
     &lt;span class="c1"&gt;// some O(1) expressions&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// some O(1) expressions&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;O(n^c)&lt;br /&gt;
  嵌套循环的时间复杂度等于行最内层语句执行的次数。例如，下面的示例循环具有为O(n^2)的时间复杂度&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// some O(1) expressions&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// some O(1) expressions&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;O(Log n)&lt;br /&gt;
  如果在一个大小为n循环中，循环变量按照一个常量C的进行倍数的递增或递减，这个循环的复杂度就为O(Log  n).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// some O(1) expressions&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// some O(1) expressions&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;O(Log Log n)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// c为比1大的常量&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// some O(1) expressions&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//这里的 fun 函数可以是sqrt 或 cuberoot 或任何其他恒定的根&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// some O(1) expressions&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当有连续的循环，我们计算时间复杂度为时间各个循环的复杂总和。&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.geeksforgeeks.org/analysis-of-algorithms-set-4-analysis-of-loops/"&gt;http://www.geeksforgeeks.org/analysis-of-algorithms-set-4-analysis-of-loops/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.acmerblog.com/analysis-of-loops-5069.html"&gt;http://www.acmerblog.com/analysis-of-loops-5069.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm analysis"></category></entry><entry><title>算法复杂度分析</title><link href="http://actberw.github.io/posts/complexity/complexity-analysis.html" rel="alternate"></link><updated>2014-06-07T15:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-07:posts/complexity/complexity-analysis.html</id><summary type="html">&lt;p&gt;算法的复杂度是用来衡量算法运行所需要的计算机资源（时间、空间）的量, 分为时间复杂度和空间复杂度. 时间复杂度是指衡量算法执行时间的长短；空间复杂度是指衡量算法所需存储空间的大小。&lt;/p&gt;
&lt;h3&gt;Landau符号&lt;/h3&gt;
&lt;p&gt;Landau符号其实是由德国数论学家保罗·巴赫曼（Paul Bachmann）在其1892年的著作《解析数论》首先引入，由另一位德国数论学家艾德蒙·朗道（Edmund Landau）推广。Landau符号的作用在于用简单的函数来描述复杂函数行为，给出一个上或下（确）界。在计算算法复杂度时一般只用到大O符号，Landau符号体系中的小o符号、Θ符号等等比较不常用。这里的O，最初是用大写希腊字母，但现在都用大写英语字母O；小o符号也是用小写英语字母o，Θ符号则维持大写希腊字母Θ.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Asymptotic comparison&lt;/th&gt;
&lt;th&gt;operatorNumeric comparison operator&lt;/th&gt;
&lt;th&gt;------&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;f(n) = o(g(n))&lt;/td&gt;
&lt;td&gt;∀ε&amp;gt;0,∃$n_0$∈ℕ,∀n≥$n_0$,f(n)/g(n)&amp;lt;ε&lt;/td&gt;
&lt;td&gt;f的阶低于g的阶&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;f(n) = O(g(n))&lt;/td&gt;
&lt;td&gt;∃c&amp;gt;0,$n_0$∈ℕ,∀n≥$n_0$,f(n)≤cg(n)&lt;/td&gt;
&lt;td&gt;f的阶不高于g的阶。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;f(n) = Ω(g(n))&lt;/td&gt;
&lt;td&gt;∃c&amp;gt;0,$n_0$∈ℕ,∀n≥$n_0$,f(n)≥cg(n)&lt;/td&gt;
&lt;td&gt;f的阶不低于g的阶。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;f(n) = θ(g(n))&lt;/td&gt;
&lt;td&gt;⟺ f(n)=O(g(n))&amp;amp;&amp;amp;f(n)=Ω(g(n))&lt;/td&gt;
&lt;td&gt;f的阶等于g的阶。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;大O表示法&lt;/h3&gt;
&lt;p&gt;f (n) = Ο(g (n)) 表示存在一个常数C，使得在当n趋于正无穷时总有 f (n) ≤ C * g(n)。简单来说，就是f(n)在n趋于正无穷时最大也就跟g(n)差不多大。虽然对g(n)没有规定，但是一般都是取尽可能简单的函数。例如，O($2n^2+n+1$) = O ($3n^2+n+3$) = O ($7n^2+n$) = O ($n^2$) ，一般都只用O($n^2$)表示就可以了。&lt;/p&gt;
&lt;p&gt;注意到大O符号里隐藏着一个常数C，所以g(n)里一般不加系数。如果把f(n)当做一棵树，那么O(g(n))所表达的就是树干，只关心其中的主干，其他的细枝末节全都抛弃不管。&lt;/p&gt;
&lt;h3&gt;渐进分析法 (asymptotic behavior)&lt;/h3&gt;
&lt;p&gt;Asymptotic Analysis is the big idea that handles above issues in analyzing algorithms. In Asymptotic Analysis, we evaluate the performance of an algorithm in terms of input size (we don’t measure the actual running time). We calculate, how does the time (or space) taken by an algorithm increases with the input size.&lt;/p&gt;
&lt;p&gt;随着问题得规模n得增加丢掉增长慢得因子，只保留增长最快得那个(参见refer[5]).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;f(n) = 109 gives f(n) = O(1)&lt;/li&gt;
&lt;li&gt;f(n) = 5n + 12 gives f(n) = O(n)&lt;/li&gt;
&lt;li&gt;f(n) = $n^2 + 3n + 112$ gives f(n) = O($n^2$)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;时间复杂度和渐近时间复杂度&lt;/h3&gt;
&lt;p&gt;一个是时间复杂度，一个是渐近时间复杂度。前者是某个算法的时间耗费，它是该算法所求解问题规模n的函数，而后者是指当问题规模趋向无穷大时，该算法时间复杂度的数量级, 含有。&lt;/p&gt;
&lt;h3&gt;常用的函数&lt;/h3&gt;
&lt;p&gt;一个良好的算法能够对性能起到关键作用，因此性能改进的首要点是对算法的改进。在算法的时间复杂度排序上依次是:
O(1) -&amp;gt; O(lg n) -&amp;gt; O(n) -&amp;gt; O(n lg n) -&amp;gt; O($n^2$) -&amp;gt; O($n^3$) -&amp;gt; O($n^k$) -&amp;gt; O($k^n$) -&amp;gt; O(n!), 注: 在算法复杂度分析中，lg通常表示以2为底的对数。&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0][Asymptotic Notations][http://www.geeksforgeeks.org/analysis-of-algorithms-set-3asymptotic-notations/]&lt;/li&gt;
&lt;li&gt;[1]&lt;a href="http://bigocheatsheet.com/"&gt;常用算法的复杂度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2]&lt;a href="http://www.gocalf.com/blog/algorithm-complexity-and-master-theorem.html"&gt;http://www.gocalf.com/blog/algorithm-complexity-and-master-theorem.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3]&lt;a href="http://discrete.gr/complexity/"&gt;http://discrete.gr/complexity/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[4]&lt;a href="http://aofa.cs.princeton.edu/home/"&gt;princeton lectures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[5]&lt;a href="http://www.geeksforgeeks.org/analysis-of-algorithms-set-1-asymptotic-analysis/"&gt;渐进式分析法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="algorithm analysis"></category></entry><entry><title>python 字符串字面量表示方式</title><link href="http://actberw.github.io/posts/python/string-literal.html" rel="alternate"></link><updated>2014-06-07T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-07:posts/python/string-literal.html</id><summary type="html">&lt;h3&gt;String Literals&lt;/h3&gt;
&lt;p&gt;string字面量支持前缀: r/R(raw string), u/U(unicode string), b/B(byte literal in python3, ignore in python 2), u和b后面可以跟r, 支持下面的转义字符.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Escape&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\newline&lt;/td&gt;
&lt;td&gt;Ignored (continuation line)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;td&gt;Backslash (stores one )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\'&lt;/td&gt;
&lt;td&gt;Single quote (stores ')&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\"&lt;/td&gt;
&lt;td&gt;Double quote (stores ")&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\a&lt;/td&gt;
&lt;td&gt;Bell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;Backspace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\f&lt;/td&gt;
&lt;td&gt;Formfeed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\n&lt;/td&gt;
&lt;td&gt;Newline (linefeed)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\r&lt;/td&gt;
&lt;td&gt;Carriage return&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\t&lt;/td&gt;
&lt;td&gt;Horizontal tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\v&lt;/td&gt;
&lt;td&gt;Vertical tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\xhh&lt;/td&gt;
&lt;td&gt;Character with hex value hh (at most 2 digits)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\ooo&lt;/td&gt;
&lt;td&gt;Character with octal value ooo (up to 3 digits)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\0&lt;/td&gt;
&lt;td&gt;Null: binary 0 character (doesn’t end string)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td id="id"&gt;\N&lt;/td&gt;
&lt;td&gt;Unicode database ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\uhhhh&lt;/td&gt;
&lt;td&gt;Unicode 16-bit hex&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\Uhhhhhhhh&lt;/td&gt;
&lt;td&gt;Unicode 32-bit hexa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\other&lt;/td&gt;
&lt;td&gt;Not an escape (keeps both \ and other)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Unicode Literals&lt;/h3&gt;
&lt;p&gt;unicode字面量用前缀u/U表示, 特殊的字符可以用 &lt;code&gt;'\u' + 四个十六进制&lt;/code&gt;  或者  &lt;code&gt;'\U' + 八个十六进制&lt;/code&gt; 转义序列表示, 也可以用string literals的8为转义序列'\x', 但是 '\x' 后面只能跟两个十六进制符号(只能表示ascii字符部分).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&lt;/span&gt;&lt;span class="se"&gt;\xac\u1234\u20ac\U00008000&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;      &lt;span class="o"&gt;^^^^&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="n"&gt;hex&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;          &lt;span class="o"&gt;^^^^^^&lt;/span&gt; &lt;span class="n"&gt;four&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="n"&gt;Unicode&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;                      &lt;span class="o"&gt;^^^^^^^^^^&lt;/span&gt; &lt;span class="n"&gt;eight&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="n"&gt;Unicode&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;97&lt;/span&gt; &lt;span class="mi"&gt;172&lt;/span&gt; &lt;span class="mi"&gt;4660&lt;/span&gt; &lt;span class="mi"&gt;8364&lt;/span&gt; &lt;span class="mi"&gt;32768&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="https://www.inkling.com/read/learning-python-mark-lutz-4th/chapter-7/string-literals"&gt;https://www.inkling.com/read/learning-python-mark-lutz-4th/chapter-7/string-literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[1]&lt;a href="https://docs.python.org/2/reference/lexical_analysis.html#string-literals"&gt;https://docs.python.org/2/reference/lexical_analysis.html#string-literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2]&lt;a href="https://docs.python.org/2/howto/unicode.html#unicode-literals-in-python-source-code"&gt;https://docs.python.org/2/howto/unicode.html#unicode-literals-in-python-source-code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3]&lt;a href="http://legacy.python.org/dev/peps/pep-0223/"&gt;http://legacy.python.org/dev/peps/pep-0223/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="str"></category><category term="unicode"></category></entry><entry><title>python 变量或方法中下划线的意义</title><link href="http://actberw.github.io/posts/python/name-underscores.html" rel="alternate"></link><updated>2014-06-06T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-06:posts/python/name-underscores.html</id><summary type="html">&lt;p&gt;The following special forms using leading or trailing underscores are recognized (these can generally be combined with any case convention):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;_single_leading_underscore: weak "internal use" indicator. E.g. from M import * does not import objects whose name starts with an underscore.Use one leading underscore only for non-public methods and instance variables.&lt;/li&gt;
&lt;li&gt;single_trailing_underscore_: used by convention to avoid conflicts with Python keyword, e.g. &lt;code&gt;Tkinter.Toplevel(master, class_='ClassName')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;__double_leading_underscore: when naming a class attribute, invokes name mangling (inside class FooBar, __boo becomes _FooBar__boo; see below). To avoid name clashes with subclasses, use two leading underscores to invoke Python's name mangling rules.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;double_leading_and_trailing_underscore&lt;/strong&gt;: "magic" objects or attributes that live in user-controlled namespaces. E.g. &lt;strong&gt;init&lt;/strong&gt;, &lt;strong&gt;import&lt;/strong&gt; or &lt;strong&gt;file&lt;/strong&gt;. Never invent such names; only use them as documented.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://legacy.python.org/dev/peps/pep-0008/"&gt;http://legacy.python.org/dev/peps/pep-0008/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="underscore"></category><category term="mangling"></category></entry><entry><title>python encoding</title><link href="http://actberw.github.io/posts/python/encoding.html" rel="alternate"></link><updated>2014-06-05T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-05:posts/python/encoding.html</id><summary type="html">&lt;p&gt;This PEP proposes to introduce a syntax to declare the encoding of a Python source file. The encoding information is then used by the Python parser to interpret the file using the given encoding. Most notably this enhances the interpretation of Unicode literals in the source code and makes it possible to write Unicode literals using e.g. UTF-8 directly in an Unicode aware editor.&lt;/p&gt;
&lt;p&gt;To define a source code encoding, a magic comment must be placed into the source files either as first or second line in the file, such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="c"&gt;# coding=&amp;lt;encoding name&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="c"&gt;#!/usr/bin/python&lt;/span&gt;
  &lt;span class="c"&gt;# -*- coding: &amp;lt;encoding name&amp;gt; -*-&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python's tokenizer/compiler combo will need to be updated to work as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read the file&lt;/li&gt;
&lt;li&gt;decode it into Unicode assuming a fixed per-file encoding&lt;/li&gt;
&lt;li&gt;convert it into a UTF-8 byte string&lt;/li&gt;
&lt;li&gt;tokenize the UTF-8 content&lt;/li&gt;
&lt;li&gt;compile it, creating Unicode objects from the given Unicode data and creating string objects from the Unicode literal data by first reencoding the UTF-8 data into 8-bit string data using the given file encoding&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that Python identifiers are restricted to the ASCII subset of the encoding, and thus need no further conversion.  encoding 指定正确的情况下, 统一用unicode还是str根据情况选择.&lt;/p&gt;
&lt;p&gt;refer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]&lt;a href="http://legacy.python.org/dev/peps/pep-0263/"&gt;http://legacy.python.org/dev/peps/pep-0263/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="encoding"></category><category term="utf-8"></category></entry><entry><title>pelican</title><link href="http://actberw.github.io/posts/misc/pelican.html" rel="alternate"></link><updated>2014-06-05T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2014-06-05:posts/misc/pelican.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;依赖&lt;br /&gt;
    At this time, Pelican is dependent on the following Python packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;feedgenerator, to generate the Atom feeds&lt;/li&gt;
&lt;li&gt;jinja2, for templating support&lt;/li&gt;
&lt;li&gt;docutils, for supporting reStructuredText as an input format&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you’re not using Python 2.7, you will also need the argparse package.&lt;/p&gt;
&lt;p&gt;Optionally:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pygments, for syntax highlighting&lt;/li&gt;
&lt;li&gt;Markdown, for supporting Markdown as an input format&lt;/li&gt;
&lt;li&gt;Typogrify, for typographical enhancements&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装
参考&lt;a href="http://www.linuxzen.com/shi-yong-pelicanda-zao-jing-tai-bo-ke.html"&gt;http://www.linuxzen.com/shi-yong-pelicanda-zao-jing-tai-bo-ke.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;timezone&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Asia&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Shanghai&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文章发布时间&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DEFAULT_DATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文章url&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文章名字&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;FILENAME_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(?P&amp;lt;slug&amp;gt;.*)&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他配置参见&lt;a href="http://docs.getpelican.com/en/3.1.1/settings.html"&gt;http://docs.getpelican.com/en/3.1.1/settings.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;File metadata&lt;/p&gt;
&lt;p&gt;支持下面几种&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;thats&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;awesome&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;yeah&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Alexis&lt;/span&gt; &lt;span class="n"&gt;Metaireau&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Short&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;feeds&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署到github&lt;/p&gt;
&lt;p&gt;github pages有两种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;user or group page (依赖master分支)&lt;/li&gt;
&lt;li&gt;project page(依赖gh-pages分支)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里主要说下user or group page, 下面的操作是为了把原数据, 和生成的html页面放在同一个版本库中, source分支存原数据, master 存html页面, 借助于ghp-import工具.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个usrname.github.io 库&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本地&lt;code&gt;pelican-quickstart&lt;/code&gt; 创建一个博客&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;quickstart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链接远程库(username换成实际的名字)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;pull&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑.gitignore, 忽略output目录, pid文件, .pyc文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;output/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gitignore&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*.pid&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gitignore&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*.pyc&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gitignore&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建source分支&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;co&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;可能需要&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;orphan&lt;/span&gt;&lt;span class="err"&gt;选项&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改Makefile
把github: publish 下面的两行换成如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以后所有操作都在source分支下进行，就可以执行make github 发布博客, &lt;code&gt;git add .&lt;/code&gt;保存源码推到source分支.&lt;/p&gt;
&lt;p&gt;注: make github之后需要等一会才能生效.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="pelican"></category><category term="python"></category></entry><entry><title>C学习计划</title><link href="http://actberw.github.io/posts/learn-plan/c.html" rel="alternate"></link><updated>2013-12-01T00:00:00+08:00</updated><author><name>actberw</name></author><id>tag:actberw.github.io,2013-12-01:posts/learn-plan/c.html</id><summary type="html">&lt;h3&gt;基础教程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;How to Think Like a Computer Scientist: C version(dropbox) (done)&lt;/li&gt;
&lt;li&gt;C程序设计语言 (doing)&lt;/li&gt;
&lt;li&gt;http://cprogrammingcodes.blogspot.hk/p/c-tutorial.html&lt;/li&gt;
&lt;li&gt;linux C 编程一站式学习&lt;/li&gt;
&lt;li&gt;征服C指针&lt;/li&gt;
&lt;li&gt;C专家编程&lt;/li&gt;
&lt;li&gt;C陷进与缺陷&lt;/li&gt;
&lt;li&gt;计算机程序的构造和解释&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;operation System&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;modern operation system&lt;/li&gt;
&lt;li&gt;linux kernel development &lt;/li&gt;
&lt;li&gt;Understanding the Linux Kernel&lt;/li&gt;
&lt;li&gt;深入理解计算机系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;数学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;程序员怎样学数学&lt;a href="http://kb.cnblogs.com/page/90166/"&gt;http://kb.cnblogs.com/page/90166/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;微积分&lt;/li&gt;
&lt;li&gt;线性代数&lt;/li&gt;
&lt;li&gt;概率论&lt;/li&gt;
&lt;li&gt;离散数学&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;数据结构与算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;算法: c语言实现&lt;/li&gt;
&lt;li&gt;算法导论&lt;/li&gt;
&lt;li&gt;编程珠玑&lt;/li&gt;
&lt;li&gt;algorithms(algorithms design)(dropbox)&lt;/li&gt;
&lt;li&gt;程序员实用算法(缓存算法lru)&lt;/li&gt;
&lt;li&gt;编程之美&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://shentar.me/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E8%90%A5%E6%95%91%E5%85%AC%E4%B8%BB%E9%97%AE%E9%A2%98/"&gt;http://shentar.me/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E8%90%A5%E6%95%91%E5%85%AC%E4%B8%BB%E9%97%AE%E9%A2%98/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/feixiaoxing/article/category/878822/4"&gt;http://blog.csdn.net/feixiaoxing/article/category/878822/4&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.fishc.com/category/structure"&gt;http://blog.fishc.com/category/structure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux编程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LINUX UNIX设计思想&lt;/li&gt;
&lt;li&gt;UNIX编程艺术&lt;/li&gt;
&lt;li&gt;unix 环境高级编程&lt;/li&gt;
&lt;li&gt;UNIX网络编程 : 第1卷&lt;/li&gt;
&lt;li&gt;UNIX网络编程 卷2&lt;/li&gt;
&lt;li&gt;代码大全&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;网络tcp/ip&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;图解tcp/ip&lt;/li&gt;
&lt;li&gt;tcp/ip 详解&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;安全&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Web之困：现代Web应用安全指南&lt;/li&gt;
&lt;li&gt;https://code.google.com/p/browsersec/wiki/Part1&lt;/li&gt;
&lt;li&gt;http://blog.jobbole.com/1225/&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;编程之道&lt;/li&gt;
&lt;li&gt;人月神话&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Eric S. Raymond五部曲 (reading)&lt;a href="http://www.catb.org/~esr/writings/cathedral-bazaar/"&gt;http://www.catb.org/~esr/writings/cathedral-bazaar/&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Brief History of Hackerdom&lt;/li&gt;
&lt;li&gt;The Cathedral and the Bazaar&lt;/li&gt;
&lt;li&gt;How To Become A Hacker&lt;/li&gt;
&lt;li&gt;Homesteading the Noosphere&lt;/li&gt;
&lt;li&gt;The Magic Cauldron&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.c4learn.com/"&gt;http://www.c4learn.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;http://blog.csdn.net/skymingst/article/details/7436892&lt;/li&gt;
&lt;li&gt;编译原理&lt;/li&gt;
&lt;li&gt;http://coolshell.cn/articles/2474.html&lt;/li&gt;
&lt;li&gt;http://coolshell.cn/articles/3723.html&lt;/li&gt;
&lt;li&gt;scheme or haskell&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;硬件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;编码&lt;/li&gt;
&lt;/ul&gt;</summary><category term="c"></category></entry></feed>